/* Generated by AN DISI Unibo */ 
package it.unibo.navi

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Navi ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		val mapname     ="roomMap"
		
		var Curmove     = "" 
		var curmoveIsForward = false 
		
		//REAL ROBOT
		//var StepTime   = 1000 	 
		//var PauseTime  = 500 
		
		//VIRTUAL ROBOT
		var StepTime   = 330	//for virtual
		var PauseTime  = 300
		
		var PauseTimeL  = PauseTime.toLong()
		
		var goalX = 0
		var goalY = 0
		
		var esecuzioneInCorso = "" //variabile che indica cosa sta facendo il robot: con tale variabile so quale messaggio 
									//devo inviare al master dopo aver raggiunto il goal
		var destinatario = ""
		var Tback = 0
		var updated = false
		
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						solve("consult('moves.pl')","") //set resVar	
						solve("consult('domesticAppliancesPos.pl')","") //set resVar	
						itunibo.planner.plannerUtil.initAI(  )
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("in attesa di un comando")
					}
					 transition(edgeName="t10",targetState="controlDirection",cond=whenDispatch("goalDirection"))
					transition(edgeName="t11",targetState="returnHome",cond=whenDispatch("goHome"))
					transition(edgeName="t12",targetState="savePos",cond=whenDispatch("sendInfoPos"))
					transition(edgeName="t13",targetState="updateRobotPos",cond=whenEvent("robotPosition"))
				}	 
				state("updateRobotPos") { //this:State
					action { //it:State
						if(updated == false){ println("Ricevuta posizione aggiornata del robot")
						if( checkMsgContent( Term.createTerm("robotPosition(X,Y,D)"), Term.createTerm("robotPosition(X,Y,D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								itunibo.planner.moveUtils.loadRoomMap(myself ,mapname )
								
												var x = payloadArg(0).toString().toInt()
												var y = payloadArg(1).toString().toInt()
												var d = payloadArg(2).toString()
												itunibo.planner.plannerUtil.resetRobotPos(x, y, itunibo.planner.plannerUtil.getPosX(), itunibo.planner.plannerUtil.getPosY(), d )
												updated = true
								itunibo.planner.moveUtils.showCurrentRobotState(  )
									val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  
								forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
						}
						 }
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("savePos") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sendInfoPos(NAME,X,Y)"), Term.createTerm("sendInfoPos(NAME,X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Ricevuto un messaggio con posizione da salvare: ${payloadArg(0).toString()} ${payloadArg(1).toString()} ${payloadArg(2).toString()}")
								var salvaX = payloadArg(1).toInt()
											var salvaY = payloadArg(2).toInt()
											when( payloadArg(0).toString()) {
									  		"table" -> 
								solve("assert(table('${salvaX}','${salvaY}'))","") //set resVar	
								"fridge" ->
								solve("assert(fridge('${salvaX}','${salvaY}'))","") //set resVar	
								"pantry" ->
								solve("assert(pantry('${salvaX}','${salvaY}'))","") //set resVar	
								"dishWasher" ->
								solve("assert(dishWasher('${salvaX}','${salvaY}'))","") //set resVar	
								}
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("returnHome") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("goHome(X)"), Term.createTerm("goHome(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Ricevuto messaggio per tornare ad RH")
								
												goalX = 0
											 	goalY = 0
												esecuzioneInCorso = "RH"
												destinatario = payloadArg(0).toString()
								forward("startGoal", "startGoal(0,0)" ,"navi" ) 
						}
					}
					 transition(edgeName="t104",targetState="reachRequestedGoal",cond=whenDispatch("startGoal"))
				}	 
				state("reachRequestedGoal") { //this:State
					action { //it:State
							val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  
						forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
					}
					 transition( edgeName="goto",targetState="makeThePlan", cond=doswitch() )
				}	 
				state("makeThePlan") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.setGoal( goalX, goalY  )
						itunibo.planner.moveUtils.doPlan(myself)
					}
					 transition( edgeName="goto",targetState="executePlannedActions", cond=doswitch() )
				}	 
				state("executePlannedActions") { //this:State
					action { //it:State
						solve("retract(move(M))","") //set resVar	
						if(currentSolution.isSuccess()) { Curmove = getCurSol("M").toString() 
						              curmoveIsForward=(Curmove == "w")
						 }
						else
						{ Curmove = ""; curmoveIsForward=false
						 }
					}
					 transition( edgeName="goto",targetState="checkAndDoAction", cond=doswitchGuarded({(Curmove.length>0) }) )
					transition( edgeName="goto",targetState="goalOk", cond=doswitchGuarded({! (Curmove.length>0) }) )
				}	 
				state("goalOk") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.showCurrentRobotState(  )
							val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()  
						forward("modelUpdate", "modelUpdate(roomMap,$MapStr)" ,"resourcemodel" ) 
						itunibo.planner.moveUtils.showCurrentRobotState(  )
						itunibo.planner.plannerUtil.saveMap( mapname  )
						delay(500) 
						println("${esecuzioneInCorso}")
						when(esecuzioneInCorso) {
							    	"RH" ->	{
												if(destinatario == "master1")
						forward("homeReached", "homeReached" ,"master1" ) 
						}
								   	"ruotando" -> {
												if(destinatario == "master1")
						forward("directionReached", "directionReached" ,"master1" ) 
						}
								}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("checkAndDoAction") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="doForwardMove", cond=doswitchGuarded({curmoveIsForward}) )
					transition( edgeName="goto",targetState="doTheMove", cond=doswitchGuarded({! curmoveIsForward}) )
				}	 
				state("doTheMove") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.rotate(myself ,Curmove, PauseTime )
					}
					 transition( edgeName="goto",targetState="executePlannedActions", cond=doswitch() )
				}	 
				state("doForwardMove") { //this:State
					action { //it:State
						delay(PauseTimeL)
						itunibo.planner.moveUtils.attemptTomoveAhead(myself ,StepTime )
					}
					 transition(edgeName="t05",targetState="handleStepOk",cond=whenDispatch("stepOk"))
					transition(edgeName="t06",targetState="hadleStepFail",cond=whenDispatch("stepFail"))
				}	 
				state("handleStepOk") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
					}
					 transition( edgeName="goto",targetState="executePlannedActions", cond=doswitch() )
				}	 
				state("hadleStepFail") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("stepFail(R,T)"), Term.createTerm("stepFail(Obs,Time)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								Tback=payloadArg(1).toString().toInt() / 4
						}
						itunibo.planner.moveUtils.backToCompensate(myself ,Tback, PauseTime )
						itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
					}
					 transition( edgeName="goto",targetState="executePlannedActions", cond=doswitch() )
				}	 
				state("controlDirection") { //this:State
					action { //it:State
						
									esecuzioneInCorso = "ruotando"
						if( checkMsgContent( Term.createTerm("goalDirection(D,Y)"), Term.createTerm("goalDirection(D,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												destinatario = payloadArg(1).toString()
												while(itunibo.planner.moveUtils.getDirection(myself) != payloadArg(0).toString()){
													itunibo.planner.moveUtils.rotateLeft(myself, PauseTime)
													delay(500)
												}
						}
					}
					 transition( edgeName="goto",targetState="goalOk", cond=doswitch() )
				}	 
			}
		}
}
