/* Generated by AN DISI Unibo */ 
package it.unibo.addfood

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Addfood ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var answer="" 
			var FoodCode="" 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("ADDFOOD AVVIATO")
						itunibo.coap.fridge.createClient( "localhost", 5684, "serverfridge"  )
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("")
						println("State waitCmd")
						println("in attesa di un comando")
					}
					 transition(edgeName="t00",targetState="requestForCode",cond=whenDispatch("addFood"))
				}	 
				state("requestForCode") { //this:State
					action { //it:State
						println("")
						println("State requestForCode")
						if( checkMsgContent( Term.createTerm("addFood(FOODCODE)"), Term.createTerm("addFood(FOODCODE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								FoodCode = payloadArg(0).toString()
								itunibo.coap.fridge.put( FoodCode  )
						}
					}
					 transition(edgeName="t11",targetState="checkAnswer",cond=whenDispatch("answerFromFridgeCoap"))
				}	 
				state("checkAnswer") { //this:State
					action { //it:State
						println("")
						println("State checkAnswer")
						if( checkMsgContent( Term.createTerm("answerFromFridgeCoap(ANSWER)"), Term.createTerm("answerFromFridgeCoap(ANSWER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								answer = payloadArg(0).toString()
						}
					}
					 transition( edgeName="goto",targetState="reachFridge", cond=doswitchGuarded({(answer=="yes") }) )
					transition( edgeName="goto",targetState="handleWarning", cond=doswitchGuarded({! (answer=="yes") }) )
				}	 
				state("reachFridge") { //this:State
					action { //it:State
						println("")
						println("State reachFridge")
						println("Obiettivo FRIDGE")
						forward("reachAppliance", "reachAppliance(addfood,fridge)" ,"navi" ) 
					}
					 transition(edgeName="t42",targetState="inFridge",cond=whenDispatch("fridgeReached"))
				}	 
				state("inFridge") { //this:State
					action { //it:State
						println("")
						println("State inFridge")
						forward("moveSpecificFoodOnRobot", "moveSpecificFoodOnRobot($FoodCode)" ,"fridge" ) 
						delay(2000) 
						println("Obiettivo TABLE")
						forward("reachTable", "reachTable(addfood)" ,"navi" ) 
					}
					 transition(edgeName="t43",targetState="inTable",cond=whenDispatch("tableReached"))
				}	 
				state("inTable") { //this:State
					action { //it:State
						println("")
						println("State inTable")
						forward("moveFoodToDomesticResource", "moveFoodToDomesticResource(table)" ,"kb" ) 
						delay(2000) 
						println("Obiettivo RH")
						forward("goHome", "goHome(addfood)" ,"navi" ) 
					}
					 transition(edgeName="t34",targetState="endAddFood",cond=whenDispatch("homeReached"))
				}	 
				state("endAddFood") { //this:State
					action { //it:State
						println("")
						println("State endAddFood")
						println("ADDFOOD terminata")
						delay(500) 
						forward("foodAdded", "foodAdded" ,"master5" ) 
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("handleWarning") { //this:State
					action { //it:State
						delay(500) 
						forward("warning", "warning($FoodCode)" ,"master5" ) 
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
