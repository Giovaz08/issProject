/* Generated by AN DISI Unibo */ 
package it.unibo.master5

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Master5 ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("MASTER 5 AVVIATO")
						utils.backupLastLog(  )
						utils.resetFile( "fileLog"  )
						utils.writeLog( "actorName | [backToCompensate - ] currentPosition | move | result\n"  )
						itunibo.coap.fridge.createClient( "localhost", 5684, "serverfridge"  )
					}
					 transition( edgeName="goto",targetState="scanningperimeter", cond=doswitch() )
				}	 
				state("scanningperimeter") { //this:State
					action { //it:State
						println("")
						println("State scanningperimeter")
						println("Inizio scansione della stanza.")
						forward("scanningPerimeter", "scanningPerimeter" ,"roomperimeterexplorer" ) 
					}
					 transition(edgeName="t00",targetState="findtable",cond=whenDispatch("endPerimeter"))
				}	 
				state("findtable") { //this:State
					action { //it:State
						println("")
						println("Fine scansione della stanza.")
						println("State findtable")
						println("Inizio ricerca del tavolo.")
						forward("scanningTable", "scanningTable" ,"findtable" ) 
					}
					 transition(edgeName="t11",targetState="executePrepare",cond=whenDispatch("homeReached"))
				}	 
				state("executePrepare") { //this:State
					action { //it:State
						println("")
						println("Fine ricerca del tavolo.")
						println("State executePrepare")
						delay(500) 
						println("Inizio prepare.")
						itunibo.coap.fridge.put( "expose"  )
						delay(1000) 
						forward("prepare", "prepare" ,"prepare" ) 
					}
					 transition(edgeName="t22",targetState="partyOnProgress",cond=whenDispatch("endPrepare"))
				}	 
				state("partyOnProgress") { //this:State
					action { //it:State
						println("")
						println("Fine prepare")
						println("State partyOnProgress")
						delay(500) 
						println("addFood di c040")
						forward("addFood", "addFood(c040)" ,"addfood" ) 
					}
					 transition(edgeName="t33",targetState="handleWarning",cond=whenDispatch("warning"))
					transition(edgeName="t34",targetState="executeClear",cond=whenDispatch("foodAdded"))
				}	 
				state("handleWarning") { //this:State
					action { //it:State
						println("")
						println("State handleWarning")
						if( checkMsgContent( Term.createTerm("warning(FOODCODE)"), Term.createTerm("warning(FOODCODE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("************** WARNING, il codice ${payloadArg(0).toString()} non esiste")
						}
					}
					 transition( edgeName="goto",targetState="executeClear", cond=doswitch() )
				}	 
				state("executeClear") { //this:State
					action { //it:State
						println("Fine party")
						itunibo.coap.fridge.put( "expose"  )
						delay(1000) 
						println("")
						println("State executeClear")
						println("Inizio clear.")
						forward("clear", "clear" ,"clear" ) 
					}
					 transition(edgeName="t45",targetState="endParty",cond=whenDispatch("endClear"))
				}	 
				state("endParty") { //this:State
					action { //it:State
						println("Fine clear")
						println("")
						println("State next")
						delay(500) 
						itunibo.coap.fridge.put( "C000"  )
						itunibo.coap.fridge.put( "C006"  )
						itunibo.coap.fridge.put( "C040"  )
						itunibo.coap.fridge.put( "expose"  )
						delay(1000) 
						println("Finito sprint5.")
					}
				}	 
			}
		}
}
