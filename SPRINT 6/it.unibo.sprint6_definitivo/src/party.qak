System party 
mqttBroker "localhost" : 1883 

/* --------------------------- */
// DISPATCH
/* --------------------------- */
 
//FOODCODE = cxxx cioè una c seguita da tre numeri 
//DR = domestic resource
//FCL = food code list   

//da master    
Dispatch addFood : addFood(FOODCODE) //REQUISITO: command sent by the smart-phone of Maitre: add food command, by specifying a food-code

//a master
Dispatch foodAdded : foodAdded(MIT)
Dispatch warning : warning(FOODCODE) //REQUISITO: send a warning to master when code food doesn't exist

Dispatch answerFromFridgeCoap : answerFromFridgeCoap(ANSWER) //da fridge
Dispatch moveSpecificFoodOnRobot : moveSpecificFoodOnRobot(FCL) //a fridge

//A navi
Dispatch goHome : goHome(MIT)
Dispatch reachAppliance : reachAppliance(MIT, NAME)
Dispatch reachTable : reachTable(MIT)

//Da navi
Dispatch fridgeReached : fridgeReached(N) 
Dispatch homeReached : homeReached(MIT) 
Dispatch tableReached : tableReached(N) 

//A kb
Dispatch moveFoodToDomesticResource : moveFoodToDomesticResource(DR)

/* --------------------------- */
// CONTESTI
/* --------------------------- */ 

Context ctxParty ip [host="localhost" port=9007] +mqtt
Context ctxDummyForNavigator ip [host="localhost" port=9002] +mqtt
Context ctxDummyForFridge ip [host="localhost" port=9006] +mqtt
Context ctxDummyForKb ip [host="localhost" port=9003] +mqtt
Context ctxDummyForRoomButler ip [host="localhost" port=9008] +mqtt

/* --------------------------- */
// ATTORI
/* --------------------------- */

ExternalQActor fridge context ctxDummyForFridge
ExternalQActor navi context ctxDummyForNavigator
ExternalQActor kb context ctxDummyForKb
ExternalQActor rbr context ctxDummyForRoomButler

QActor addfood context ctxParty {
	[" var answer=\"\" 
	var FoodCode=\"\" "]

	State s0 initial{
		println("ADDFOOD AVVIATO")
		run itunibo.coap.fridge.createClient("localhost", 5684, "serverfridge") //CoAP access
	}
	Goto waitCmd
	
	State waitCmd {
		println("")
		println("State waitCmd")
		println("in attesa di un comando")
    }
	Transition t0 whenMsg addFood -> requestForCode //da master

	State requestForCode {
		println("")
		println("State requestForCode")
		onMsg(addFood : addFood(FOODCODE)) {
			["FoodCode = payloadArg(0).toString()"]
			run itunibo.coap.fridge.put(FoodCode) //richiesta via coap
		}
	}
	Transition t1 whenMsg answerFromFridgeCoap -> checkAnswer //da fridge
	
	State checkAnswer {
		println("")
		println("State checkAnswer")
		onMsg(answerFromFridgeCoap : answerFromFridgeCoap(ANSWER)) {
			["answer = payloadArg(0).toString()"]
		}	
	}
	//se è yes procedo, altrimenti non faccio nulla e invio un warning
	Goto reachFridge if "(answer==\"yes\") " else handleWarning
	
	State reachFridge {
		println("")
		println("State reachFridge")
		println("Obiettivo FRIDGE")	
		forward navi -m reachAppliance : reachAppliance(addfood, fridge)
	}
	Transition t4 whenMsg fridgeReached -> inFridge
	
	State inFridge {
		println("")
		println("State inFridge")
		//FoodCode non è una lista, ma un solo elemento
		forward fridge -m moveSpecificFoodOnRobot : moveSpecificFoodOnRobot($FoodCode)
		delay 2000 
		println("Obiettivo TABLE")
		forward navi -m reachTable : reachTable(addfood) 
	}
	Transition t4 whenMsg tableReached -> inTable
	
	State inTable{
		println("")
		println("State inTable")  
		forward kb -m moveFoodToDomesticResource : moveFoodToDomesticResource(table)
		delay 2000
		println("Obiettivo RH")
		forward navi -m goHome : goHome(addfood)
	} 
	Transition t3 whenMsg homeReached -> endAddFood
	
	State endAddFood {
		println("")
		println("State endAddFood")
		println("ADDFOOD terminata")
		delay 500
		forward rbr -m foodAdded : foodAdded(addfood)
	}
	Goto waitCmd 
	
	State handleWarning {
		//invia warning al maitre
		delay 500
		forward rbr -m warning : warning($FoodCode)
	}
	Goto waitCmd
	
}   
