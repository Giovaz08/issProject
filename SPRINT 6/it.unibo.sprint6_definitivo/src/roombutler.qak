System roombutler     
mqttBroker "localhost" : 1883 

/* --------------------------- */
// DISPATCH
/* --------------------------- */
 
Dispatch startTheSystem : startTheSystem(N) //da master 
Dispatch systemStarted : systemStarted(N) //a master
Dispatch scanningPerimeter : scanningPerimeter(N) //a roomperimeter
Dispatch endPerimeter : endPerimeter(N) //da roomperimeter
Dispatch scanningTable : scanningTable(N) //a findtable
Dispatch homeReached : homeReached(MIT) //da navi

//REQUISITO: command sent by the smart-phone of Maitre: prepare
Dispatch prepare : prepare(N) //a prepare
Dispatch endPrepare : endPrepare(MIT) //da prepare

//REQUISITO: command sent by the smart-phone of Maitre: clear
Dispatch clear : clear(N) //a clear
Dispatch endClear : endClear(MIT) //da clear

//REQUISITO: command sent by the smart-phone of Maitre: add food command, by specifying a food-code
Dispatch addFood : addFood(FOODCODE) //a addfood
Dispatch foodAdded : foodAdded(MIT) //da addfood
Dispatch warning : warning(FOODCODE) //da addFood 

/* --------------------------- */
// CONTESTI
/* --------------------------- */ 

Context ctxRoomButler ip [host="localhost" port=9008] +mqtt
Context ctxDummyForSprint6 ip [host="localhost" port=9000] +mqtt
Context ctxDummyForScanningRoom ip [host="localhost" port=9001] +mqtt
Context ctxDummyForNavigator ip [host="localhost" port=9002] +mqtt
Context ctxDummyForPrepare ip [host="localhost" port=9004] +mqtt
Context ctxDummyForClear ip [host="localhost" port=9005] +mqtt
Context ctxDummyForParty ip [host="localhost" port=9007] +mqtt

/* --------------------------- */
// ATTORI
/* --------------------------- */

ExternalQActor master6 context ctxDummyForSprint6
ExternalQActor roomperimeterexplorer context ctxDummyForScanningRoom 
ExternalQActor findtable context ctxDummyForScanningRoom
ExternalQActor navi context ctxDummyForNavigator
ExternalQActor prepare context ctxDummyForPrepare
ExternalQActor clear context ctxDummyForClear
ExternalQActor addfood context ctxDummyForParty

QActor rbr context ctxRoomButler {
	
	[" var FoodCode = \"\" "]
	
	State s0 initial {
		println("RBR AVVIATO")
		run itunibo.coap.fridge.createClient("localhost", 5684, "serverfridge") //CoAP access
		//file di log
		run utils.backupLastLog()
		run utils.resetFile("fileLog")
		run utils.writeLog("actorName | [backToCompensate - ] currentPosition | move | result\\n")
	}
	Goto waitcmd
	
	State waitcmd {
		println("")
		println("State waitcmd")
		println("in attesa di un comando")
	}
	Transition t0 	whenMsg startTheSystem -> scanningperimeter	//inizia lo scanning
					whenMsg	homeReached -> updateMaster 		//ha finito lo scanning
					whenMsg prepare -> executePrepare			//inizia la prepare
					whenMsg endPrepare -> updateMaster			//fine della prepare
					whenMsg addFood -> addFood					//inizia a fare addFood
					whenMsg foodAdded -> updateMaster			//il codice esisteva, ha fatto
					whenMsg warning -> updateMaster				//il codice non esisteva, invia warning
					whenMsg clear -> executeClear				//inizia la clear
					whenMsg endClear -> updateMaster			//fine della clear
								
	//CHIEDERE AL PROF: EVENTUALMENTE HA SENSO FARE UN ATTORE A PARTE CON SCANNING E FINDTABLE?
	//NEL CASO LA RISPOSTA FOSSE Sì, SI POTREBBERO METTERE GLI STATI RELATIVI DENTRO AL RBR? O NON è CORRETTO?
	
	//inizio la scansione del perimetro della stanza
	State scanningperimeter {
		println("")
		println("State scanningperimeter")
		println("Inizio scansione della stanza.")
		forward roomperimeterexplorer -m scanningPerimeter : scanningPerimeter	
	}
	Transition t1 whenMsg endPerimeter -> findtable
	
	//inizio ricerca del tavolo
	State findtable {
		println("")
		println("Fine scansione della stanza.")
		println("State findtable")
		println("Inizio ricerca del tavolo.")
		forward findtable -m scanningTable : scanningTable
	}
   	Goto waitcmd

	State executePrepare {
		println("")
		println("State executePrepare")
		delay 500
		println("Inizio prepare.")
        forward prepare -m prepare : prepare 
	}
	Goto waitcmd

	State addFood {
		println("")
		println("State addFood")
		onMsg(addFood : addFood(CODE)) {
			["FoodCode = payloadArg(0).toString() "]
			println("addFood di ${FoodCode}")
			forward addfood -m addFood : addFood($FoodCode)
		}
	}
	Goto waitcmd
	
	State executeClear {
		println("")
		println("State executeClear")
		forward clear -m clear : clear 
	}
	Goto waitcmd
	
	State updateMaster {
		println("")
		println("State updateMaster")
		
		onMsg(homeReached : homeReached(navi)) {
			println("Fine ricerca del tavolo.")
			forward master6 -m systemStarted : systemStarted
		}
		onMsg(endPrepare : endPrepare(prepare)) {
			println("Fine prepare")
			forward master6 -m endPrepare : endPrepare
		}
		onMsg(foodAdded : foodAdded(addfood)) {
			println("Fine addFood")
			forward master6 -m foodAdded : foodAdded
		}
		onMsg(warning : warning(FOODCODE)) {
			println("addFood non riuscita")
			forward master6 -m warning : warning($FoodCode)
		}
		onMsg(endClear : endClear(clear)) {
			println("Fine clear")
			forward master6 -m endClear : endClear
		}
	}
	Goto waitcmd
} 
