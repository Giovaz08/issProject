/* Generated by AN DISI Unibo */ 
package it.unibo.kb

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Kb ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var DomesticResource = ""
			var FoodCodeList = ""
			var Istruction = ""
			var Object = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("KB AVVIATA")
						solve("consult('roomState.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("in attesa di un comando")
					}
					 transition(edgeName="t00",targetState="objFromRobot",cond=whenDispatch("moveObjToDomesticResource"))
					transition(edgeName="t01",targetState="foodFromRobot",cond=whenDispatch("moveFoodToDomesticResource"))
					transition(edgeName="t02",targetState="objToRobot",cond=whenDispatch("moveObjOnRobot"))
					transition(edgeName="t03",targetState="foodToRobot",cond=whenDispatch("moveFoodOnRobot"))
					transition(edgeName="t04",targetState="selectedFoodOnRobot",cond=whenDispatch("moveSpecificFoodOnRobot"))
					transition(edgeName="t05",targetState="doExpose",cond=whenDispatch("expose"))
				}	 
				state("objFromRobot") { //this:State
					action { //it:State
						println("")
						println("State objFromRobot")
						if( checkMsgContent( Term.createTerm("moveObjToDomesticResource(DR)"), Term.createTerm("moveObjToDomesticResource(DR)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								DomesticResource = payloadArg(0).toString()
						}
						solve("exposeObjectOnRobot(L)","") //set resVar	
						if(currentSolution.isSuccess()) { println("exposeObjectOnRobot = ${getCurSol("L").toString()}")
						var objOnRobot = getCurSol("L").toString().replace("[", "").replace("]", "")
						println("Oggetti presenti sul robot: ${objOnRobot}")
						for(obj in objOnRobot.split(",")){
						println("inserisco sul ${DomesticResource}: ${obj}")
						when(DomesticResource) {
									  		"table" -> {
						solve("assert(itemontable('${obj}'))","") //set resVar	
						solve("retract(itemonrobot('${obj}'))","") //set resVar	
						}
											"pantry" -> {
						solve("assert(iteminpantry('${obj}'))","") //set resVar	
						solve("retract(itemonrobot('${obj}'))","") //set resVar	
						}
											"dishwasher" -> {
						solve("assert(itemindishwasher('${obj}'))","") //set resVar	
						solve("retract(itemonrobot('${obj}'))","") //set resVar	
						}
										}
									}
						 }
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("foodFromRobot") { //this:State
					action { //it:State
						println("")
						println("State foodFromRobot")
						if( checkMsgContent( Term.createTerm("moveFoodToDomesticResource(DR)"), Term.createTerm("moveFoodToDomesticResource(DR)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								DomesticResource = payloadArg(0).toString()
						}
						solve("exposeFoodOnRobot(L)","") //set resVar	
						if(currentSolution.isSuccess()) { println("exposeFoodOnRobot = ${getCurSol("L").toString()}")
						var foodOnRobot = getCurSol("L").toString().replace("[", "").replace("]", "").replace("/", "").replace(")", "").replace("'", "")
						for(food in foodOnRobot.split("((")){
										if(food != ""){
											var f = food.split(",")
											var nome = f.get(0).toString()
											var codice = f.get(1).toString()
											var qtaRobot = Integer.parseInt(f.get(2).toString())
						println("inserisco sul ${DomesticResource}: ${nome} ${codice} ${qtaRobot}")
						when(DomesticResource) {
										  		"table" -> {
						solve("itemontable(NAME,'${codice}',QTA)","") //set resVar	
						if(currentSolution.isSuccess()) { var qtaTavolo = Integer.parseInt(getCurSol("QTA").toString())
						solve("retract(itemontable(NAME,'${codice}',QTA))","") //set resVar	
						solve("assert(itemontable('${nome}','${codice}','${qtaTavolo+qtaRobot}'))","") //set resVar	
						 }
						else
						{ solve("assert(itemontable('${nome}','${codice}','${qtaRobot}'))","") //set resVar	
						 }
						solve("retract(itemonrobot('${nome}','${codice}',QTA))","") //set resVar	
						}
												"fridge" -> {
						solve("iteminfridge(NAME,'${codice}',QTA)","") //set resVar	
						if(currentSolution.isSuccess()) { var qtaFrigo = Integer.parseInt(getCurSol("QTA").toString())
						solve("retract(iteminfridge(NAME,'${codice}',QTA))","") //set resVar	
						solve("assert(iteminfridge('${nome}','${codice}','${qtaFrigo+qtaRobot}'))","") //set resVar	
						 }
						else
						{ solve("assert(iteminfridge('${nome}','${codice}','${qtaRobot}'))","") //set resVar	
						 }
						solve("retract(itemonrobot('${nome}','${codice}',QTA))","") //set resVar	
						}
											}
										}
									}
						 }
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("objToRobot") { //this:State
					action { //it:State
						println("")
						println("State objToRobot")
						if( checkMsgContent( Term.createTerm("moveObjOnRobot(DR)"), Term.createTerm("moveObjOnRobot(DR)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								DomesticResource = payloadArg(0).toString()
						}
						when(DomesticResource) {
									"table" -> {
						solve("exposeObjectOnTable(L)","") //set resVar	
						if(currentSolution.isSuccess()) { println("exposeObjectOnTable = ${getCurSol("L").toString()}")
						var objOnTable = getCurSol("L").toString().replace("[", "").replace("]", "")
						println("Oggetti presenti sul tavolo: ${objOnTable}")
						for(obj in objOnTable.split(",")){
						println("inserisco sul robot: ${obj}")
						solve("assert(itemonrobot('${obj}'))","") //set resVar	
						solve("retract(itemontable('${obj}'))","") //set resVar	
						}
						 }
						}
									"pantry" -> {
						solve("exposePantry(L)","") //set resVar	
						if(currentSolution.isSuccess()) { println("exposePantry = ${getCurSol("L").toString()}")
						var objInPantry = getCurSol("L").toString().replace("[", "").replace("]", "")
						println("Oggetti presenti nella dispensa: ${objInPantry}")
						for(obj in objInPantry.split(",")){
						println("inserisco sul robot: ${obj}")
						solve("assert(itemonrobot('${obj}'))","") //set resVar	
						solve("retract(iteminpantry('${obj}'))","") //set resVar	
						}
						 }
						}
									"dishwasher" -> {
						solve("exposeDishwasher(L)","") //set resVar	
						if(currentSolution.isSuccess()) { println("exposeDishwasher = ${getCurSol("L").toString()}")
						var objInDishwasher = getCurSol("L").toString().replace("[", "").replace("]", "")
						println("Oggetti presenti nella lavastoviglie: ${objInDishwasher}")
						for(obj in objInDishwasher.split(",")){
						println("inserisco sul robot: ${obj}")
						solve("assert(itemonrobot('${obj}'))","") //set resVar	
						solve("retract(itemindishwasher('${obj}'))","") //set resVar	
						}
						 }
						}
								}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("foodToRobot") { //this:State
					action { //it:State
						println("")
						println("State foodToRobot")
						if( checkMsgContent( Term.createTerm("moveFoodOnRobot(DR)"), Term.createTerm("moveFoodOnRobot(DR)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								DomesticResource = payloadArg(0).toString()
						}
						when(DomesticResource) {
									"table" -> {
						solve("exposeFoodOnTable(L)","") //set resVar	
						if(currentSolution.isSuccess()) { println("exposeFoodOnTable = ${getCurSol("L").toString()}")
						var foodOnTable = getCurSol("L").toString().replace("[", "").replace("]", "").replace("/", "").replace(")", "").replace("'", "")
						println("Cibo presente sul tavolo: ${foodOnTable}")
						for(food in foodOnTable.split("((")){
												if(food != ""){
													var f = food.split(",")
													var nome = f.get(0).toString()
													var codice = f.get(1).toString()
													var quantita = Integer.parseInt(f.get(2).toString())
						println("inserisco sul robot: ${nome} ${codice} ${quantita}")
						solve("assert(itemonrobot('${nome}','${codice}','${quantita}'))","") //set resVar	
						solve("retract(itemontable('${nome}','${codice}',QTA))","") //set resVar	
						}
											}
						 }
						}
									"fridge" -> {
						}
								}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("selectedFoodOnRobot") { //this:State
					action { //it:State
						println("")
						println("State selectedFoodOnRobot")
						if( checkMsgContent( Term.createTerm("moveSpecificFoodOnRobot(FCL)"), Term.createTerm("moveSpecificFoodOnRobot(FCL)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								FoodCodeList = payloadArg(0).toString()
								println("onMsg lista dei codici ricevuta: ${FoodCodeList}")
						}
						println("lista dei codici ricevuta: ${FoodCodeList}")
						for(foodCode in FoodCodeList.split("_")){
									var nome = ""
						println("ricerca per codice ${foodCode}")
						solve("iteminfridge(NAME,'${foodCode}',QTA)","") //set resVar	
						if(currentSolution.isSuccess()) { println("risolta ricerca codice-cibo")
						nome = getCurSol("NAME").toString()
										var qta = Integer.parseInt(getCurSol("QTA").toString())-1
						solve("retract(iteminfridge('${nome}','${foodCode}',QTA))","") //set resVar	
						solve("assert(iteminfridge('${nome}','${foodCode}',${qta}))","")
						solve("itemonrobot(NAME,'${foodCode}',QTA)","") //set resVar	
						if(currentSolution.isSuccess()) { println("risolta ricerca codice-cibo")
						nome = getCurSol("NAME").toString()
											var quantita = Integer.parseInt(getCurSol("QTA").toString())+1
						solve("retract(itemonrobot('${nome}','${foodCode}',QTA))","") //set resVar	
						solve("assert(itemonrobot('${nome}','${foodCode}',${quantita}))","")
						 }
						else
						{ solve("assert(itemonrobot('${nome}','${foodCode}',1))","") //set resVar	
						 }
						 }
						}
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("doExpose") { //this:State
					action { //it:State
						println("")
						println("State doExpose")
						solve("expose(OT,FT,F,P,D,OR,FR)","") //set resVar	
						if(currentSolution.isSuccess()) { println("Cibo sul tavolo: ${getCurSol("FT").toString().replace("[", "").replace("]", "").replace("/", "").replace(")", "").replace("'", "").replace("(", " ")}")
						println("Oggetti sul tavolo: ${getCurSol("OT").toString().replace("[", "").replace("]", "").replace("/", "").replace(")", "").replace("'", "").replace("(", " ")}")
						println("Cibo nel frigo: ${getCurSol("F").toString().replace("[", "").replace("]", "").replace("/", "").replace(")", "").replace("'", "").replace("(", " ")}")
						println("Oggetti rimasti nel pantry: ${getCurSol("P").toString().replace("[", "").replace("]", "").replace("/", "").replace(")", "").replace("'", "").replace("(", " ")}")
						println("Cibo rimasto sul robot: ${getCurSol("FR").toString().replace("[", "").replace("]", "").replace("/", "").replace(")", "").replace("'", "").replace("(", " ")}")
						println("Oggetti rimasti sul robot: ${getCurSol("OR").toString().replace("[", "").replace("]", "").replace("/", "").replace(")", "").replace("'", "").replace("(", " ")}")
						println("Oggetti rimasti nel dishwasher: ${getCurSol("D").toString().replace("[", "").replace("]", "").replace("/", "").replace(")", "").replace("'", "").replace("(", " ")}")
						 }
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
