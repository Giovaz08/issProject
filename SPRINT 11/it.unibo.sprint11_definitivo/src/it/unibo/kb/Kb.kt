/* Generated by AN DISI Unibo */ 
package it.unibo.kb

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Kb ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("KB AVVIATA")
						solve("consult('roomState.pl')","") //set resVar	
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("in attesa di un comando")
					}
					 transition(edgeName="t00",targetState="doExpose",cond=whenEvent("consult"))
					transition(edgeName="t01",targetState="objFromRobot",cond=whenDispatch("moveObjToDomesticResource"))
					transition(edgeName="t02",targetState="foodFromRobot",cond=whenDispatch("moveFoodToDomesticResource"))
					transition(edgeName="t03",targetState="objToRobot",cond=whenDispatch("moveObjOnRobot"))
					transition(edgeName="t04",targetState="foodToRobot",cond=whenDispatch("moveFoodOnRobot"))
					transition(edgeName="t05",targetState="updateFoodOnTable",cond=whenDispatch("ate"))
					transition(edgeName="t06",targetState="writeLog",cond=whenDispatch("log"))
				}	 
				state("objFromRobot") { //this:State
					action { //it:State
						println("")
						println("State objFromRobot")
						if( checkMsgContent( Term.createTerm("moveObjToDomesticResource(DR)"), Term.createTerm("moveObjToDomesticResource(table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("exposeObjectOnRobot(L)","") //set resVar	
								if(currentSolution.isSuccess()) { println("exposeObjectOnRobot = ${getCurSol("L").toString()}")
								
												var objOnRobot = utils.formatListProlog(getCurSol("L").toString())
												println("Oggetti presenti sul robot: ${objOnRobot}")
												for(obj in objOnRobot.split(",")){
								solve("assert(itemontable('${obj}'))","") //set resVar	
								utils.writeLogKb( "+.OT.${obj}"  )
								solve("retract(itemonrobot('${obj}'))","") //set resVar	
								utils.writeLogKb( "-.OR.${obj}"  )
								
												} //for
								 }
						}
						if( checkMsgContent( Term.createTerm("moveObjToDomesticResource(DR)"), Term.createTerm("moveObjToDomesticResource(pantry)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("exposeObjectOnRobot(L)","") //set resVar	
								if(currentSolution.isSuccess()) { println("exposeObjectOnRobot = ${getCurSol("L").toString()}")
								
												var objOnRobot = utils.formatListProlog(getCurSol("L").toString())
												println("Oggetti presenti sul robot: ${objOnRobot}")
												for(obj in objOnRobot.split(",")){
								solve("assert(iteminpantry('${obj}'))","") //set resVar	
								utils.writeLogKb( "+.PA.${obj}"  )
								solve("retract(itemonrobot('${obj}'))","") //set resVar	
								utils.writeLogKb( "-.OR.${obj}"  )
								
												} //for
								 }
						}
						if( checkMsgContent( Term.createTerm("moveObjToDomesticResource(DR)"), Term.createTerm("moveObjToDomesticResource(dishwasher)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("exposeObjectOnRobot(L)","") //set resVar	
								if(currentSolution.isSuccess()) { println("exposeObjectOnRobot = ${getCurSol("L").toString()}")
								
												var objOnRobot = utils.formatListProlog(getCurSol("L").toString())
												println("Oggetti presenti sul robot: ${objOnRobot}")
												for(obj in objOnRobot.split(",")){
								solve("assert(itemindishwasher('${obj}'))","") //set resVar	
								utils.writeLogKb( "+.DW.${obj}"  )
								solve("retract(itemonrobot('${obj}'))","") //set resVar	
								utils.writeLogKb( "-.OR.${obj}"  )
								
												} //for
								 }
						}
					}
					 transition( edgeName="goto",targetState="doExpose", cond=doswitch() )
				}	 
				state("foodFromRobot") { //this:State
					action { //it:State
						println("")
						println("State foodFromRobot")
						if( checkMsgContent( Term.createTerm("moveFoodToDomesticResource(DR)"), Term.createTerm("moveFoodToDomesticResource(table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("exposeFoodOnRobot(L)","") //set resVar	
								if(currentSolution.isSuccess()) { println("exposeFoodOnRobot = ${getCurSol("L").toString()}")
								
												var foodOnRobot = utils.formatListPrologFood(getCurSol("L").toString())
												println("foodOnRobot = ${foodOnRobot}")
												for(food in foodOnRobot.split("-")){
													if(food != ""){
														var f = food.split(",")
														var name = f.get(0).toString()
														var code = f.get(1).toString()
														var qtyRobot = Integer.parseInt(f.get(2).toString())	//qtà sul robot
								println("inserisco sul table: ${name} ${code} ${qtyRobot}")
								solve("itemontable(NAME,'${code}',QTA)","") //set resVar	
								if(currentSolution.isSuccess()) { 
															var qtyTable = Integer.parseInt(getCurSol("QTA").toString())
								solve("retract(itemontable(NAME,'${code}',QTA))","") //set resVar	
								utils.writeLogKb( "-.FT.${name},${code},${qtyTable}"  )
								
															var qtySum = qtyRobot+qtyTable
															solve("assert(itemontable('${name}','${code}',${qtySum}))","")
								utils.writeLogKb( "+.FT.${name},${code},${qtySum}"  )
								 }
								else
								{ 
															solve("assert(itemontable('${name}','${code}',${qtyRobot}))","")
								utils.writeLogKb( "+.FT.${name},${code},${qtyRobot}"  )
								 }
								solve("retract(itemonrobot('${name}','${code}',QTA))","") //set resVar	
								utils.writeLogKb( "-.FR.${name},${code},${qtyRobot}"  )
								
													} //if (food != "")
												} //for
								 }
						}
						if( checkMsgContent( Term.createTerm("moveFoodToDomesticResource(DR)"), Term.createTerm("moveFoodToDomesticResource(fridge)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("exposeFoodOnRobot(L)","") //set resVar	
								if(currentSolution.isSuccess()) { println("exposeFoodOnRobot = ${getCurSol("L").toString()}")
								
												var foodOnRobot = utils.formatListPrologFood(getCurSol("L").toString())
												println("foodOnRobot = ${foodOnRobot}")
												for(food in foodOnRobot.split("-")){
													if(food != ""){
														var f = food.split(",")
														var name = f.get(0).toString()
														var code = f.get(1).toString()
														var qtyRobot = Integer.parseInt(f.get(2).toString())	//qtà sul robot
								println("inserisco nel fridge: ${name} ${code} ${qtyRobot}")
								
														val ToSend = "${name}_${code}_${qtyRobot}"
								forward("moveFoodToFridge", "moveFoodToFridge($ToSend)" ,"fridge" ) 
								solve("retract(itemonrobot('${name}','${code}',QTA))","") //set resVar	
								utils.writeLogKb( "-.FR.${name},${code},${qtyRobot}"  )
								
													} //if (food != "")
												} //for
								 }
						}
					}
					 transition( edgeName="goto",targetState="doExpose", cond=doswitch() )
				}	 
				state("objToRobot") { //this:State
					action { //it:State
						println("")
						println("State objToRobot")
						if( checkMsgContent( Term.createTerm("moveObjOnRobot(DR)"), Term.createTerm("moveObjOnRobot(table)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("exposeObjectOnTable(L)","") //set resVar	
								if(currentSolution.isSuccess()) { println("exposeObjectOnTable = ${getCurSol("L").toString()}")
								
												var objOnTable = utils.formatListProlog(getCurSol("L").toString())
												println("Oggetti presenti sul tavolo: ${objOnTable}")
												for(obj in objOnTable.split(",")){
								println("inserisco sul robot: ${obj}")
								solve("assert(itemonrobot('${obj}'))","") //set resVar	
								utils.writeLogKb( "+.OR.${obj}"  )
								solve("retract(itemontable('${obj}'))","") //set resVar	
								utils.writeLogKb( "-.OT.${obj}"  )
								
												}
								 }
						}
						if( checkMsgContent( Term.createTerm("moveObjOnRobot(DR)"), Term.createTerm("moveObjOnRobot(pantry)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("exposePantry(L)","") //set resVar	
								if(currentSolution.isSuccess()) { println("exposePantry = ${getCurSol("L").toString()}")
								
												var objInPantry = utils.formatListProlog(getCurSol("L").toString())
												println("Oggetti presenti nella dispensa: ${objInPantry}")
												for(obj in objInPantry.split(",")){
								println("inserisco sul robot: ${obj}")
								solve("assert(itemonrobot('${obj}'))","") //set resVar	
								utils.writeLogKb( "+.OR.${obj}"  )
								solve("retract(iteminpantry('${obj}'))","") //set resVar	
								utils.writeLogKb( "-.PA.${obj}"  )
								
												}
								 }
						}
						if( checkMsgContent( Term.createTerm("moveObjOnRobot(DR)"), Term.createTerm("moveObjOnRobot(dishwasher)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("exposeDishwasher(L)","") //set resVar	
								if(currentSolution.isSuccess()) { println("exposeDishwasher = ${getCurSol("L").toString()}")
								
												var objInDishwasher = utils.formatListProlog(getCurSol("L").toString())
												println("Oggetti presenti nella lavastoviglie: ${objInDishwasher}")
												for(obj in objInDishwasher.split(",")){
								println("inserisco sul robot: ${obj}")
								solve("assert(itemonrobot('${obj}'))","") //set resVar	
								utils.writeLogKb( "+.OR.${obj}"  )
								solve("retract(itemindishwasher('${obj}'))","") //set resVar	
								utils.writeLogKb( "-.DW.${obj}"  )
								
												}
								 }
						}
					}
					 transition( edgeName="goto",targetState="doExpose", cond=doswitch() )
				}	 
				state("foodToRobot") { //this:State
					action { //it:State
						println("")
						println("State foodToRobot")
						if( checkMsgContent( Term.createTerm("moveFoodOnRobot(DR,NAMECODE)"), Term.createTerm("moveFoodOnRobot(table,NAMECODE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								solve("exposeFoodOnTable(L)","") //set resVar	
								if(currentSolution.isSuccess()) { println("exposeFoodOnTable = ${getCurSol("L").toString()}")
								
												var foodOnTable = utils.formatListPrologFood(getCurSol("L").toString())
												println("Cibo presente sul tavolo: ${foodOnTable}") 
												for(food in foodOnTable.split("-")){
													if(food != ""){
														var f = food.split(",")
														var nameFood = f.get(0).toString()
														var codeFood = f.get(1).toString()
														var qtyFood = Integer.parseInt(f.get(2).toString())
								println("inserisco sul robot: ${nameFood} ${codeFood} ${qtyFood}")
								
														solve("assert(itemonrobot('${nameFood}','${codeFood}',${qtyFood}))","")
								utils.writeLogKb( "+.FR.${nameFood},${codeFood},${qtyFood}"  )
								solve("retract(itemontable('${nameFood}','${codeFood}',QTA))","") //set resVar	
								utils.writeLogKb( "-.FT.${nameFood},${codeFood},${qtyFood}"  )
								}
												}
								 }
						}
						if( checkMsgContent( Term.createTerm("moveFoodOnRobot(DR,NAMECODE)"), Term.createTerm("moveFoodOnRobot(fridge,NAMECODE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											var name = payloadArg(1).toString().split("_").get(0).toString()
											var code = payloadArg(1).toString().split("_").get(1).toString()
								solve("itemonrobot('${name}','${code}',QTA)","") //set resVar	
								if(currentSolution.isSuccess()) { println("risolta ricerca codice-cibo")
								
												var qty = Integer.parseInt(getCurSol("QTA").toString())+1
								solve("retract(itemonrobot('${name}','${code}',QTA))","") //set resVar	
								utils.writeLogKb( "-.FR.${name},${code},${qty}"  )
								
												solve("assert(itemonrobot('${name}','${code}',${qty}))","")
								utils.writeLogKb( "+.FR.${name},${code},${qty}"  )
								 }
								else
								{ solve("assert(itemonrobot('${name}','${code}',1))","") //set resVar	
								utils.writeLogKb( "+.FR.${name},${code},1"  )
								 }
						}
					}
					 transition( edgeName="goto",targetState="doExpose", cond=doswitch() )
				}	 
				state("updateFoodOnTable") { //this:State
					action { //it:State
						println("")
						println("State objFromRobot")
						if( checkMsgContent( Term.createTerm("ate(FOODCODE)"), Term.createTerm("ate(FOODCODE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											var FoodCode = payloadArg(0).toString()
								solve("itemontable(NAME,'${FoodCode}',QTA)","") //set resVar	
								if(currentSolution.isSuccess()) { 
												var qtyTable = Integer.parseInt(getCurSol("QTA").toString())
								 				var name = getCurSol("NAME").toString()
								solve("retract(itemontable(NAME,'${FoodCode}',QTA))","") //set resVar	
								utils.writeLogKb( "-.FT.${name},${FoodCode},${qtyTable}"  )
								
												var qty = qtyTable-1
								if(qty != 0){ 
													solve("assert(itemontable('${name}','${FoodCode}',${qty}))","")
								utils.writeLogKb( "+.FT.${name},${FoodCode},${qty}"  )
								 }
								 }
						}
					}
					 transition( edgeName="goto",targetState="doExpose", cond=doswitch() )
				}	 
				state("doExpose") { //this:State
					action { //it:State
						println("")
						println("State doExpose")
						solve("expose(OT,FT,P,D,OR,FR)","") //set resVar	
						if(currentSolution.isSuccess()) { println("ho risolto expose")
						
									var ObjInPantry = utils.prepareToSend("pantry", getCurSol("P").toString(), "objects")
									var ObjInDishwasher = utils.prepareToSend("dishwasher", getCurSol("D").toString(), "objects")
									var ObjFoodOnTable = utils.prepareToSend("table", getCurSol("OT").toString() + "%" + getCurSol("FT").toString(), "objects and food")
									var ObjFoodOnRobot = utils.prepareToSend("robot", getCurSol("OR").toString() + "%" + getCurSol("FR").toString(), "objects and food")
						println("Objects in pantry: ${ObjInPantry}")
						println("Objects in dishwasher: ${ObjInDishwasher}")
						println("Objects on table: ${ObjFoodOnTable}")
						println("Objects on robot: ${ObjFoodOnRobot}")
						itunibo.frontend.frontendSupport.updateFrontend(myself ,ObjInPantry )
						itunibo.frontend.frontendSupport.updateFrontend(myself ,ObjInDishwasher )
						itunibo.frontend.frontendSupport.updateFrontend(myself ,ObjFoodOnTable )
						itunibo.frontend.frontendSupport.updateFrontend(myself ,ObjFoodOnRobot )
						 }
						else
						{ println("non ho risolto expose")
						 }
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("writeLog") { //this:State
					action { //it:State
						println("")
						println("State writeLog")
						solve("expose(OT,FT,P,D,OR,FR)","") //set resVar	
						if(currentSolution.isSuccess()) { utils.writeLogKb( "PA: ${getCurSol("P").toString()}"  )
						utils.writeLogKb( "FT: ${getCurSol("FT").toString()}"  )
						utils.writeLogKb( "OT: ${getCurSol("OT").toString()}"  )
						utils.writeLogKb( "DW: ${getCurSol("D").toString()}"  )
						utils.writeLogKb( "FR: ${getCurSol("FR").toString()}"  )
						utils.writeLogKb( "OR: ${getCurSol("OR").toString()}"  )
						 }
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
			}
		}
}
