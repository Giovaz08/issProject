/* Generated by AN DISI Unibo */ 
package it.unibo.master6

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Master6 ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var consultKbFlag = false
			  var consultFridgeFlag = false
			  var consultKb = ""
			  var ConsultFridge = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("MASTER 6 AVVIATO")
						delay(1000) 
						itunibo.coap.fridge.createClient( "localhost", 5684, "serverfridge"  )
						forward("startTheSystem", "startTheSystem" ,"rbr" ) 
					}
					 transition(edgeName="t00",targetState="firstTask",cond=whenDispatch("systemStarted"))
				}	 
				state("firstTask") { //this:State
					action { //it:State
						println("")
						println("State firstTask")
						delay(1000) 
						itunibo.coap.fridge.put( "expose"  )
						forward("prepare", "prepare" ,"rbr" ) 
					}
					 transition(edgeName="t11",targetState="secondTask",cond=whenDispatch("endPrepare"))
				}	 
				state("secondTask") { //this:State
					action { //it:State
						println("")
						println("State secondTask")
						itunibo.coap.fridge.put( "expose"  )
						delay(1000) 
						forward("addFood", "addFood(c003)" ,"rbr" ) 
					}
					 transition(edgeName="t22",targetState="handleWarning",cond=whenDispatch("warning"))
					transition(edgeName="t23",targetState="thirdTask",cond=whenDispatch("foodAdded"))
				}	 
				state("handleWarning") { //this:State
					action { //it:State
						println("")
						println("State handleWarning")
						if( checkMsgContent( Term.createTerm("warning(FOODCODE)"), Term.createTerm("warning(FOODCODE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("************** WARNING, il codice ${payloadArg(0).toString()} non esiste")
						}
					}
					 transition( edgeName="goto",targetState="thirdTask", cond=doswitch() )
				}	 
				state("thirdTask") { //this:State
					action { //it:State
						println("")
						println("State thirdTask")
						emit("consult", "consult(master6)" ) 
					}
					 transition(edgeName="t34",targetState="handleConsult",cond=whenDispatch("consultReplyKb"))
					transition(edgeName="t35",targetState="handleConsult",cond=whenDispatch("consultReplyFridge"))
				}	 
				state("handleConsult") { //this:State
					action { //it:State
						println("")
						println("State handleConsult")
						if( checkMsgContent( Term.createTerm("consultReplyFridge(CONTENT)"), Term.createTerm("consultReplyFridge(CONTENT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								ConsultFridge = payloadArg(0).toString().replace( "[/(/","").replace( "/(/"," ").replace("]", "").replace("), ", "-").replace("),", ",").replace("-", "), ")   //CHIEDERE AL PROF PER REPLACE
											consultFridgeFlag = true
								println("Arrivata risposta da Fridge")
						}
						if( checkMsgContent( Term.createTerm("consultReplyKb(CONTENT)"), Term.createTerm("consultReplyKb(CONTENT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								consultKb = payloadArg(0).toString()
											  consultKbFlag = true
								println("Arrivata risposta da Kb")
						}
						if(consultKbFlag && consultFridgeFlag){ consultFridgeFlag = false
									  consultKbFlag = false
						forward("endConsult", "endConsult" ,"master6" ) 
						 }
					}
					 transition(edgeName="t106",targetState="handleConsult",cond=whenDispatchGuarded("consultReplyKb",{!consultKbFlag && consultFridgeFlag}))
					transition(edgeName="t107",targetState="handleConsult",cond=whenDispatchGuarded("consultReplyFridge",{consultKbFlag && !consultFridgeFlag}))
					transition(edgeName="t108",targetState="fourthTask",cond=whenDispatch("endConsult"))
				}	 
				state("fourthTask") { //this:State
					action { //it:State
						println("")
						println("State fourthTask")
						println("")
						println("------------------------------")
						println("CONSULT")
						println("------------------------------")
						println("Fridge: ${ConsultFridge}")
						 var i = 1 
								var toPrint = "" 
						for(list in consultKb.split("__")){
									toPrint = list.toString().replace("_", ", ")
									when(i) { 
										1 -> println("Oggetti nel pantry: ${toPrint} ")
										2 -> println("Oggetti sul table: ${toPrint} ")
										3 -> println("Cibo sul table: ${toPrint} ")
										4 -> println("Cibo sul robot: ${toPrint} ")
										5 -> println("Oggetti sul robot: ${toPrint} ")
										6 -> println("Oggetti nel dishwasher: ${toPrint} ")
									}
									i++
								}
						delay(1000) 
						forward("clear", "clear" ,"rbr" ) 
					}
					 transition(edgeName="t59",targetState="lastTask",cond=whenDispatch("endClear"))
				}	 
				state("lastTask") { //this:State
					action { //it:State
						println("")
						println("State lastTask")
						delay(500) 
						itunibo.coap.fridge.put( "C000"  )
						itunibo.coap.fridge.put( "C006"  )
						itunibo.coap.fridge.put( "C040"  )
						itunibo.coap.fridge.put( "expose"  )
						delay(1000) 
						println("Finito sprint.")
					}
				}	 
			}
		}
}
