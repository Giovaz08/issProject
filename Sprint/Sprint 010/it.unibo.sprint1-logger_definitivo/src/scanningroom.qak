System scanningroom

//mosquitto broker
mqttBroker "localhost" : 1883 

Event  robotPosition: robotPosition( X, Y, D )	

//messaggio per indicare che il modello è cambiato (prende in input: TARGET = target da aggiornare, VALUE = il relativo nuovo valore)
//Dispatch modelChange : modelChange( TARGET, VALUE )
//messaggio per indicare che bisogna aggiornare il modello (prende in input: TARGET = target da aggiornare, VALUE = il relativo nuovo valore)
Dispatch modelUpdate : modelUpdate( TARGET, VALUE )
//messaggio per indicare di far eseguire al robot un passo (prende in input: DURATION = il tempo per eseguire un passo)
//Dispatch onestep : onestep(DURATION)
//messaggio per indicare che il passo effettuato dal robot è andato a buon fine
Dispatch stepOk : stepOk( X )
//messaggio per indicare che il passo effettuato dal robot è andato a buon fine (prendi in input: R = ok | obstacle, T = time)		
Dispatch stepFail : stepFail(R,T)

//messaggio scambiato tra sprint1 e roomperimeterexplorer per indicare di iniziare a scansionare il perimetro della stanza
Dispatch scanningPerimeter : scanningPerimeter( X )
//messaggio scambiato tra sprint1 e roomperimeterexplorer per indicare che la scansione del perimetro della stanza è conclusa
Dispatch endPerimeter : endPerimeter( X )
//messaggio scambiato tra sprint1 e findtable per indicare di iniziare a cercare il tavolo
Dispatch scanningTable : scanningTable( X )
//messaggio scambiato tra sprint1 e findtable per indicare che è stato trovato il tavolo
Dispatch endScanningTable : endScanningTable( X )
//messaggio automandato dall'attore findtable per indicare che è terminata la scansione di una colonna
Dispatch endRow	: endRow( X )
//messaggio automandato dall'attore findtable tra gli stati init e doStep per iniziare a scansionare la stanza per trovare il tavolo
Dispatch startStep : startStep( X )
//messaggio automandato dall'attore findtable per indicare di continuare a camminare nella stessa colonna
Dispatch continueStep : continueStep( X )
//messaggio scambiato al navi per condividere le posizioni del tavolo e degli elettrodomestici
Dispatch sendInfoPos : sendInfoPos( NAME, X, Y )

/* --------------------------- */
// CONTESTI
/* --------------------------- */

//contesto dell'attore roomPerimeter e per findTable
Context ctxScanningRoom ip [host="localhost" port=8068] +mqtt
//contesto dell'attore 
Context ctxDummyForMind ip [host="localhost" port=8035] +mqtt
//contesto dell'attore master1
Context ctxDummyForSprint1 ip [host="localhost" port=9002] +mqtt
//contesto dell'attore navi
Context ctxDummyNavigator ip [host="localhost" port=8038] +mqtt

/* --------------------------- */
// ATTORI
/* --------------------------- */

//richiamo all'attore resourcemodel, il quale è esterno al progetto (it.unibo.robotmind)
ExternalQActor resourcemodel context ctxDummyForMind
//richiamo all'attore onestepahead, il quale è esterno al progetto (it.unibo.robotmind)
ExternalQActor onestepahead context ctxDummyForMind
//richiamo all'attore master1, il quale è esterno al system (sprint1.qak)
ExternalQActor master1 context ctxDummyForSprint1
//richiamo all'attore navi, il quale è esterno al system (sprint1.qak)
ExternalQActor navi context ctxDummyNavigator

//attore che scansiona il perimetro della stanza
QActor roomperimeterexplorer context ctxScanningRoom {
["
	//variabile per indicare il nome del file in cui salvare la mappa
	val mapname = \"roomMap\"

	//varibile per indicare il tempo che impiega il robot per tornare indietro di un passo
	var Tback = 0

	//variabile per indicare il numero di muri scansionati
	var NumWallsFound = 0
	
	//VIRTUAL ROBOT
	//varibile per indicare il tempo impiegato per effettuare un passo in avanti
	var StepTime = 330
	//variabile per indicare il tempo di ritardo	 
	var PauseTime = 300
	var PauseTimeL  = PauseTime.toLong()

"]
	State s0 initial {	  
 	    //start CoAP observer per il nano
		run itunibo.planner.plannerUtil.initAI()
		run itunibo.planner.moveUtils.showCurrentRobotState()
		//serve per pulire il file prolog "domesticaAppliancePos" ad ogni nuova esecuzione
		//run itunibo.planner.plannerUtil.initProlog("domesticAppliancesPos")
 	}
 	Goto waitComand
 	
 	State waitComand{
 		run itunibo.robot.utils.backupLastLog()
 		["
		var log = \"==================== roomperimeterexplorer ====================\\n[backToCompensate - ] currentPosition | move | result\\n===============================================================\"
		"]
		run itunibo.robot.utils.writeLog(log)
    	println("in attesa di un comando")
    }
    Transition t1 whenMsg scanningPerimeter -> detectWall
 	
 	State detectWall { 
	["
		NumWallsFound++
	"]
      	//NO GOAL: JUST ONE STEP ahead
  		run itunibo.planner.plannerUtil.showMap()  
     }
    Goto doAheadMove if "(NumWallsFound<5)" else wallFound //1 = muro SUD, 2= muro EST, 3 = muro NORD
    														//4 = muro OVEST, 5= condizione STOP
    
    //stato nel quale l'attore effettua un passo in avanti
    State doAheadMove{
   		run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime)
	}
	Transition t0 whenMsg stepOk -> stepDone
				  whenMsg stepFail -> stepFailed
	
	//stato in cui l'attore onestepahead riesce ad effettuare un passo in avanti
	State stepDone{  
 		run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
		delayVar PauseTimeL
		println("MyRobotPos=(${itunibo.planner.plannerUtil.getPosX()}, ${itunibo.planner.plannerUtil.getPosY()}, ${itunibo.planner.moveUtils.getDirection(myself)})")
 	}
	Goto doAheadMove
	
	//onestepahead ha trovato un ostacolo
	State stepFailed{  
		println("FOUND WALL") //non è sicuramente il tavolo perché lo individua dopo
		["val MapStr = itunibo.planner.plannerUtil.getMapOneLine()  "]		
 		forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)   
		
		//printCurrentMessage		        
 		onMsg(stepFail : stepFail(Obs,Time)) { 
			[" Tback=payloadArg(1).toString().toInt() / 4 "]
 			println("stepFailed ${payloadArg(1).toString()}")
 		}
 		run itunibo.planner.moveUtils.backToCompensate(myself, Tback, PauseTime) 
 		run itunibo.planner.plannerUtil.wallFound()
		run itunibo.planner.moveUtils.rotateLeft(myself, PauseTime)
	}   
    Goto detectWall
    
    //stato in cui il planner ha scansionato tutto il perimetro della stanza e comunica all'attore master1 di aver terminato
    State wallFound{
		run itunibo.planner.plannerUtil.saveMap(mapname)
		run itunibo.planner.moveUtils.saveMap(myself, mapname)
		println("FINAL MAP")   
 		run itunibo.planner.moveUtils.showCurrentRobotState()
 		
 		//salvataggio nella kb
		[" var mapMaxX = itunibo.planner.moveUtils.getMapDimX() - 2
		var mapMaxY = itunibo.planner.moveUtils.getMapDimY() - 2 "]
		solve(assert(fridge("${mapMaxX}", 0)))
		solve(assert(dishWasher("${mapMaxX}", "${mapMaxY}")))
		solve(assert(pantry(0, "${mapMaxY}")))
 		solve(consult("domesticAppliancesPos.pl"))
 		ifSolved{//Inizio ad inviare le posizioni degli elettrodomestici a navi
 				solve(fridge(X, Y))
 				ifSolved{
 					delay 100
 					println("fridge at: ${getCurSol(\"X\").toString()}, ${getCurSol(\"Y\").toString()}")
 					forward navi -m sendInfoPos: sendInfoPos(fridge,$getCurSol("X"),$getCurSol("Y"))
 				}
	   			solve(dishWasher(X, Y))
	   			ifSolved{
	   				delay 100
	   				println("dishWasher at: ${getCurSol(\"X\").toString()}, ${getCurSol(\"Y\").toString()}")
 					forward navi -m sendInfoPos: sendInfoPos( dishWasher, $getCurSol("X"),$getCurSol("Y"))
	   			}   
	   			solve(pantry(X, Y))
	   			ifSolved{
	   				delay 100
	   				println("pantry at: ${getCurSol(\"X\").toString()}, ${getCurSol(\"Y\").toString()}")
	   				forward navi -m sendInfoPos: sendInfoPos( pantry, $getCurSol("X"), $getCurSol("Y"))
	   			}   
 	 		}
 			forward master1 -m endPerimeter : endPerimeter		
  	}
}

//attore che ricerca la posizione del tavolo nella stanza
QActor findtable context ctxScanningRoom {
["
	//flag per indicare se la mappa esiste o meno
	var mapEmpty = true

	//variabile per indicare il nome del file in cui è salvata/salvare la mappa
	val mapname = \"roomMap\"

	//VIRTUAL ROBOT
	//varibile per indicare il tempo impiegato per effettuare un passo in avanti
	var StepTime = 330
	//variabile per indicare il tempo di ritardo	 
	var PauseTime = 300
	var PauseTimeL  = PauseTime.toLong()

	//variabile per contare le righe ispezionate
	var Row = 0
	//variabile per indicare il numero passi e viene resettata ad ogni cambio colonna
	var NumPassi = 0 
	//variabile per indicare il numero di angoli del tavolo scansionati
	var StepAroundTable = 0
	//variabile per indicare il tempo che il virtual robot deve impiegare per effettuare un passo all'indietro
	var Tback = 0
	//variabile per indicare da quale posizione il robot ha trovato il tavolo per la prima volta
	var InitialDirection = \"\"
	var fineScansioneTavolo = false
	var mapMaxX = 0
	var mapMaxY = 0
"]
	
	State s0 initial {
		solve(consult("moves.pl")) 
 	}
	Transition t0 whenMsg scanningTable -> loadmap
	
	//stato in cui viene caricata la mappa della stanza
	State loadmap{
		solve(consult("domesticAppliancesPos.pl")) 
		
		run itunibo.planner.plannerUtil.initAI()
 		run itunibo.planner.moveUtils.loadRoomMap(myself, mapname)	    
		["mapEmpty = itunibo.planner.moveUtils.mapIsEmpty()"]		
 		if "!mapEmpty" {
		["val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()
			mapMaxX = itunibo.planner.moveUtils.getMapDimX()
			mapMaxY = itunibo.planner.moveUtils.getMapDimY()"]
			println("mapMaxX = ${mapMaxX}, mapMaxY = ${mapMaxY}")
 			forward resourcemodel -m modelUpdate : modelUpdate(roomMap, $MapStr)   
 		}
	}
	Goto warning if "mapEmpty" else init
	
	State warning{
		println("========================================")
		println("WARNING: map not found")
		println("========================================")
	}
	
	//----------------------------------------------
	
	//stato in cui si posiziona il robot in cella (1,1) con direzione "downDir"
	State init {
		println("")
		println("#######################################")
		println("")
		println("State init")
		println("INIT - MyRobotPos=(${itunibo.planner.plannerUtil.getPosX()}, ${itunibo.planner.plannerUtil.getPosY()}, ${itunibo.planner.moveUtils.getDirection(myself)})")
		//robot è in 0, 0, Downdir. Deve girarsi a sinistra per cominciare ad esplorare la prima riga.
		delayVar PauseTimeL
		run itunibo.planner.moveUtils.rotateLeft(myself, PauseTime) //giro a sx
		delayVar PauseTimeL
		run itunibo.planner.moveUtils.moveAhead(myself, StepTime, PauseTime) //passo avanti
		delayVar PauseTimeL
		
		println("AFTER INIT - MyRobotPos=(${itunibo.planner.plannerUtil.getPosX()}, ${itunibo.planner.plannerUtil.getPosY()}, ${itunibo.planner.moveUtils.getDirection(myself)})")
		println("Setup completato")
		run itunibo.planner.plannerUtil.showMap()
		println("")
		forward findtable -m startStep : startStep
		delayVar PauseTimeL
	}
	Transition t1 whenMsg startStep -> doStep

	//stato in cui il robot effettua un passo
	State doStep {
		println("")
		println("State doStep")
		run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime)
		delayVar PauseTimeL
	}
	Transition t2 whenMsg stepOk -> stepDone
				  whenMsg stepFail -> tableFound
	
	//stato in cui il robot è riuscito ad effettuare un passo e verificare se bisogna cambiare colonna o proseguire sulla stessa			 
	State stepDone {
		println("")
		println("State stepDone")
		run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
		delayVar PauseTimeL
		run itunibo.planner.plannerUtil.showMap()
		["NumPassi++"]
		println("MyRobotPos=(${itunibo.planner.plannerUtil.getPosX()}, ${itunibo.planner.plannerUtil.getPosY()}, ${itunibo.planner.moveUtils.getDirection(myself)})")
		println("stepDone: NumPassi= ${NumPassi}, Row= ${Row}")
		//se ho fatto 2 passi, devo cambiare colonna --> rotate
		if "(NumPassi==mapMaxX-4)" {
			forward findtable -m endRow: endRow
		}
		else {
			forward findtable -m continueStep : continueStep
		}
	}
	Transition t3 whenMsg endRow -> rotate
				  whenMsg continueStep -> doStep 
				  whenMsg stepFail -> tableFound
	
	//La stanza è 6x8 compresi i muri, quindi in realtà è 5x7 (5 righe asse y, 7 colonne asse x)
	//stato in cui il robot effettua il cambio colonna.
	State rotate {
		println("")
		println("State rotate")
		["NumPassi = 0"]
		println("Rotate - CurrentRow = ${Row}")
		if "(Row!=mapMaxY-2)" { //equivale a scrivere != 4
			if "(Row%2!=0)" {
				run itunibo.planner.moveUtils.rotateLeft(myself, PauseTime) //giro a sx
				run itunibo.planner.moveUtils.setPosition(myself)
				delayVar PauseTimeL
			
				run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime)
				delayVar PauseTimeL
				
				run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
				["Row += 1"]
				run itunibo.planner.moveUtils.rotateLeft(myself, PauseTime) //giro a sx
				run itunibo.planner.moveUtils.setPosition(myself)
				delayVar PauseTimeL
			}
			else {
				run itunibo.planner.moveUtils.rotateRight(myself, PauseTime) //giro a dx
				run itunibo.planner.moveUtils.setPosition(myself)
				delayVar PauseTimeL
			
				run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime) 
				delayVar PauseTimeL
				 
				run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
				["Row += 1"]
				run itunibo.planner.moveUtils.rotateRight(myself, PauseTime) //giro a dx
				run itunibo.planner.moveUtils.setPosition(myself)
				delayVar PauseTimeL
			}
			println("After Rotation - Row = ${Row}")
			run itunibo.planner.plannerUtil.showMap()
			println("MyRobotPos=(${itunibo.planner.plannerUtil.getPosX()}, ${itunibo.planner.plannerUtil.getPosY()}, ${itunibo.planner.moveUtils.getDirection(myself)})")
		}
		if "(Row==mapMaxY-2)" {
			println("Vai a casa")
		}	
	}	
	Goto doStep if "(Row!=mapMaxY-2)" else goHome
	
	// ---------- TROVATO IL TAVOLO ----------
	
	//stato in cui il robot è andato a sbattere contro il tavolo e deve girarsi a destra
	State tableFound{
		println("###############################")
		println("")
		println("State tableFound - trovato il tavolo")
		 		
 		if"InitialDirection==\"\""{
			["InitialDirection = itunibo.planner.moveUtils.getDirection(myself)"]
 		}
		
 		printCurrentMessage
 		onMsg(stepFail : stepFail(Obs,Time)) { 
			["Tback=payloadArg(1).toString().toInt() / 2"]
 		}
 		run itunibo.planner.moveUtils.backToCompensate(myself, Tback, PauseTime)      		 
		run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself)
		
		if "StepAroundTable == 8" {
 			println("State exploreEdge - Fine")
 			["fineScansioneTavolo = true"]
 		}
 		else{
 			solve(table("${itunibo.planner.plannerUtil.getPosX()}", "${itunibo.planner.plannerUtil.getPosY()}"))
			ifSolved{ 
				}
			else {
				["var posizioneX = itunibo.planner.plannerUtil.getPosX()
				var posizioneY = itunibo.planner.plannerUtil.getPosY()"]			
				//mi salvo la posizione del robot
				solve(assert(table("${posizioneX}", "${posizioneY}")))
				solve(lastpostableinsert(X))
				ifSolved{
					["var pos = getCurSol(\"X\").toString().replace(\"'\", \"\")	//('3','2')
					pos = pos.toString().replace(\"(\", \"\")
					pos = pos.toString().replace(\")\", \"\")
					pos = pos.toString().replace(\",\", \"\")//32
					var posX = pos.get(0)//3
					var posY = pos.get(1)//2
					 // var sentPosY = getCurSol(\"Y\").toString()"]
				  	println("Invio la nuova posizione trovata del tavolo: $posX $posY")
				  	[" forward(\"sendInfoPos\", \"sendInfoPos(table,$posX,$posY)\" ,\"navi\" ) "]
				}
			//["indexTablePos += 1"]
			}
			
			if "InitialDirection==\"downDir\""{
				//println("tableFound - mi giro a destra")
				run itunibo.planner.moveUtils.rotateRight(myself, PauseTime)
			}	
			if "InitialDirection==\"rightDir\""{
				//println("tableFound - mi giro a sinistra")
				run itunibo.planner.moveUtils.rotateLeft(myself, PauseTime)
			}	
			run itunibo.planner.plannerUtil.showMap()
			//run itunibo.planner.moveUtils.showCurrentRobotState()
			println("tableFound - MyRobotPos=(${itunibo.planner.plannerUtil.getPosX()}, ${itunibo.planner.plannerUtil.getPosY()}, ${itunibo.planner.moveUtils.getDirection(myself)})")
	 	
 		}
		
	}
  	Goto prepareToExploreEdge if "(StepAroundTable % 2 == 0)" else exploreEdge
  	

	//stato in cui il robot si posiziona in un angolo del tavolo prima di continuare ad esplorare il relativo perimetro
 	State prepareToExploreEdge{ 	
 		if "fineScansioneTavolo == true"{
 			//se ha finito di scansionare non gli faccio fare nulla
 		}else{
 			println("prepareToExploreEdge - passo in avanti")
			run itunibo.planner.moveUtils.moveAhead(myself, StepTime, PauseTime)
			println("prepareToExploreEdge - MyRobotPos=(${itunibo.planner.plannerUtil.getPosX()}, ${itunibo.planner.plannerUtil.getPosY()}, ${itunibo.planner.moveUtils.getDirection(myself)})")
			
			if "InitialDirection==\"downDir\""{
				println("prepareToExploreEdge - prepareToExploreEdge - mi giro a sinistra")
				run itunibo.planner.moveUtils.rotateLeft(myself, PauseTime)
			}	
			if "InitialDirection==\"rightDir\""{
				println("prepareToExploreEdge - prepareToExploreEdge - mi giro a sinistra")
				run itunibo.planner.moveUtils.rotateRight(myself, PauseTime)
			}
			
			println("MyRobotPos=(${itunibo.planner.plannerUtil.getPosX()}, ${itunibo.planner.plannerUtil.getPosY()}, ${itunibo.planner.moveUtils.getDirection(myself)})")
	 		
	 		run itunibo.planner.moveUtils.showCurrentRobotState()
	 	
	 	}
	}  
 	Goto exploreEdge
 	
 	//stato in cui il robot esplora il perimetro del tavolo
 	State exploreEdge{
 		
 		if "fineScansioneTavolo == true"{
 			forward findtable -m endScanningTable : endScanningTable
 		}
 		else{
 			["StepAroundTable++"]
			println("exploreEdge - StepAroundTable=${StepAroundTable}")
			run itunibo.planner.moveUtils.moveAhead( myself, StepTime, PauseTime)
			
			if "InitialDirection==\"downDir\""{
		   		run itunibo.planner.moveUtils.rotateLeft(myself, PauseTime)
		   	}
	   		if "InitialDirection==\"rightDir\""{
		   		run itunibo.planner.moveUtils.rotateRight(myself, PauseTime)
		   	}
	 		run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime)
	 		run itunibo.planner.plannerUtil.showMap()
	 	}
	}
	Transition t4 whenMsg stepFail -> tableFound
				whenMsg endScanningTable -> goHome

	State goHome{
		println("State goHome")
		run itunibo.planner.plannerUtil.saveMap(mapname)
		run itunibo.planner.moveUtils.saveMap(myself, mapname)
		
		solve(retractall(move(_)))
		
		solve(posTable(L)) 
		ifSolved{
			println("table near: ${getCurSol(\"L\")}")
		}
		
		["var posizioneX = itunibo.planner.plannerUtil.getPosX()
		var posizioneY = itunibo.planner.plannerUtil.getPosY()"]	
		solve(assert(robot("${posizioneX}", "${posizioneY}", "${itunibo.planner.moveUtils.getDirection(myself)}")))
		solve(robot(X,Y,D))
		ifSolved{
			println("Invio a navi la posizione corrente del robot: ${getCurSol(\"X\")} ${getCurSol(\"Y\")} ${getCurSol(\"D\")}")
			emit robotPosition: robotPosition($getCurSol("X"), $getCurSol("Y"), $getCurSol("D"))	
			delay 1000
		}
		
		//prima idi inviare salvati la posizione ultima nel pl, poi facci una solve
		forward master1 -m endScanningTable : endScanningTable
	}Goto end
	
	State end{
		println("Scanning table END")
	}
}