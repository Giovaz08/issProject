System scanningroom 
mqttBroker "localhost" : 1883	 

/* --------------------------- */
// DISPATCH
/* --------------------------- */

Dispatch modelUpdate : modelUpdate(TARGET,VALUE) //a resourcemodel (TARGET = target da aggiornare, VALUE = il relativo nuovo valore)
//da onestepahead
Dispatch stepOk : stepOk(N)
Dispatch stepFail : stepFail(R,T) //(R = ok | obstacle, T = time)

Dispatch robotPosition: robotPosition(X,Y,D) //a navi

//da rbr
Dispatch scanningPerimeter : scanningPerimeter(N) 
Dispatch scanningTable : scanningTable(N)

//a rbr
Dispatch endPerimeter : endPerimeter(N)
Dispatch endScanningTable : endScanningTable(N)

//automsg
Dispatch endRow	: endRow(N) //indicare che è terminata la scansione di una riga
Dispatch startStep : startStep(N) //per trovare tavolo
Dispatch continueStep : continueStep(N) //continua su stessa riga

//a navi
Dispatch sendInfoPos : sendInfoPos(NAME,X,Y)
Dispatch goHome : goHome(MIT)

/* --------------------------- */
// CONTESTI
/* --------------------------- */

Context ctxScanningRoom ip [host="localhost" port=9001] +mqtt
Context ctxDummyForMind ip [host="localhost" port=8035] +mqtt
Context ctxDummyForNavigator ip [host="localhost" port=9002] +mqtt
Context ctxDummyForRoomButler ip [host="localhost" port=9008] +mqtt

/* --------------------------- */
// ATTORI
/* --------------------------- */

ExternalQActor resourcemodel context ctxDummyForMind
ExternalQActor navi context ctxDummyForNavigator
ExternalQActor rbr context ctxDummyForRoomButler
 
//attore che scansiona il perimetro della stanza
QActor roomperimeterexplorer context ctxScanningRoom {
	["
	val mapname = \"roomMap\" //nome del file in cui salvare la mappa
	var Tback = 0 //tempo che impiega il robot per tornare indietro
	var NumWallsFound = 0 //numero di muri scansionati
	
	//VIRTUAL ROBOT
	var StepTime = 330 //tempo per effettuare un passo in avanti	 
	var PauseTime = 300 //tempo di pausa tra un passo e l'altro
	var PauseTimeL  = PauseTime.toLong()
	"]
	
	State s0 initial{
		println("ROOMPERIMETEREXPLORER AVVIATO")
		run itunibo.planner.plannerUtil.initAI()
		run itunibo.planner.moveUtils.showCurrentRobotState()
 	}
 	Goto waitComand
 	
 	State waitComand{
    	println("in attesa di un comando")
    }
    Transition t1 whenMsg scanningPerimeter -> detectWall
 	
 	State detectWall { 
 		println("")
 		println("State detectWall")
		["NumWallsFound++"]
  		run itunibo.planner.plannerUtil.showMap()  
     }
    Goto doAheadMove if "(NumWallsFound<5)" else perimeterFound 	//1 = muro SUD
    														//2 = muro EST
    														//3 = muro NORD
    														//4 = muro OVEST
    														//5 = condizione di STOP
    
    State doAheadMove{
    	println("")
 		println("State doAheadMove")
   		run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime)
	}
	Transition t0 whenMsg stepOk -> stepDone
				  whenMsg stepFail -> stepFailed
	
	//stato in cui l'attore onestepahead riesce ad effettuare un passo in avanti
	State stepDone{  
		println("")
 		println("State stepDone")
 		run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
		delayVar PauseTimeL
		println("MyRobotPos=(${itunibo.planner.plannerUtil.getPosX()}, ${itunibo.planner.plannerUtil.getPosY()}, ${itunibo.planner.moveUtils.getDirection(myself)})")
 	}
	Goto doAheadMove
	
	//onestepahead ha trovato un ostacolo
	State stepFailed{  
		println("")
 		println("State stepFailed")
		println("************************ WALL FOUND! ************************")
		["val MapStr = itunibo.planner.plannerUtil.getMapOneLine()"]		
 		forward resourcemodel -m modelUpdate : modelUpdate(roomMap,$MapStr)   
		
		onMsg(stepFail : stepFail(Obs,Time)) { 
			["Tback=payloadArg(1).toString().toInt() / 4"]
 			println("stepFailed ${payloadArg(1).toString()}")
 		}
 		run itunibo.planner.moveUtils.backToCompensate(myself, Tback, PauseTime) 
 		run itunibo.planner.plannerUtil.wallFound()
		run itunibo.planner.moveUtils.rotateLeft(myself, PauseTime)
	}   
    Goto detectWall
    
    //scansionato tutto il perimetro della stanza
    State perimeterFound {
    	println("")
 		println("State perimeterFound")
		run itunibo.planner.moveUtils.saveMap(myself, mapname)
		
		/* ATTENZIONE, DA RIVEDERE INSIEME
 		* moveUtils.saveMap chiama al suo interno plannerUtils.saveMap
 		* quindi noi basta che chiamiamo moveUtils e lo fa automaticamente
 		* anche con plannerUtils.
 		* Il prof nel suo chiama solo plannerUtils
 		*/ 
		
		println("FINAL MAP")   
 		run itunibo.planner.moveUtils.showCurrentRobotState()
 		
 		//salvataggio nella kb
		["var mapMaxX = itunibo.planner.moveUtils.getMapDimX() - 2
		var mapMaxY = itunibo.planner.moveUtils.getMapDimY() - 2"]
		solve(assert(fridge("${mapMaxX}", 0)))
		solve(assert(dishWasher("${mapMaxX}", "${mapMaxY}")))
		solve(assert(pantry(0, "${mapMaxY}")))
 		solve(consult("domesticAppliancesPos.pl"))
 		ifSolved {
 			//Invio le posizioni degli elettrodomestici a navi
 			solve(fridge(X, Y))
 			ifSolved {
 				delay 100
 				println("fridge at: ${getCurSol(\"X\").toString()}, ${getCurSol(\"Y\").toString()}")
 				forward navi -m sendInfoPos: sendInfoPos(fridge,$getCurSol("X"),$getCurSol("Y"))
 			}
   			solve(dishWasher(X, Y))
   			ifSolved {
   				delay 100
   				println("dishWasher at: ${getCurSol(\"X\").toString()}, ${getCurSol(\"Y\").toString()}")
				forward navi -m sendInfoPos: sendInfoPos(dishWasher, $getCurSol("X"),$getCurSol("Y"))
   			}   
   			solve(pantry(X, Y))
   			ifSolved {
   				delay 100
   				println("pantry at: ${getCurSol(\"X\").toString()}, ${getCurSol(\"Y\").toString()}")
   				forward navi -m sendInfoPos: sendInfoPos(pantry, $getCurSol("X"), $getCurSol("Y"))
   			}   
	 	}
 		forward rbr -m endPerimeter : endPerimeter  
  	}
}

//attore che ricerca la posizione del tavolo nella stanza
QActor findtable context ctxScanningRoom {
	["
	var mapEmpty = true //flag per indicare se la mappa esiste o meno
	val inputmapname = \"roomMap\" //mappa trovata da roomperimeterexplorer
	val outputmapname = \"roomMapWithTable\" //mappa rielaborata con tavolo

	//VIRTUAL ROBOT
	var StepTime = 330
	var PauseTime = 300
	var PauseTimeL  = PauseTime.toLong()
	var Tback = 0
	
	var Row = 0 //numero righe ispezionate
	var NumSteps = 0  //numero passi, viene resettata ad ogni cambio riga
	var StepAroundTable = 0 //numero di angoli del tavolo scansionati
	
	//posizione in cui robot trova tavolo la prima volta
	var InitialDirection = \"\"
	var EndScanningTableFlag = false
	var mapMaxX = 0
	var mapMaxY = 0
	"]
	
	State s0 initial{
		println("FINDTABLE AVVIATO")
		solve(consult("moves.pl")) 
 	}
	Transition t0 whenMsg scanningTable -> loadmap
	
	//stato in cui viene caricata la mappa della stanza
	State loadmap{
		println("")
		println("**********************************************************************************************")
		println("********************** INIZIO ESPLORAZIONE STANZA PER TROVARE IL TAVOLO **********************")
		println("**********************************************************************************************")
		
		println("")
		println("State loadmap")
		solve(consult("domesticAppliancesPos.pl")) 
		run itunibo.planner.plannerUtil.initAI()
 		run itunibo.planner.moveUtils.loadRoomMap(myself, inputmapname)	    
		["mapEmpty = itunibo.planner.moveUtils.mapIsEmpty()"]		
 		if "!mapEmpty" {
			["
			val MapStr =  itunibo.planner.plannerUtil.getMapOneLine()
			mapMaxX = itunibo.planner.moveUtils.getMapDimX()
			mapMaxY = itunibo.planner.moveUtils.getMapDimY()
			"]
			println("mapMaxX = ${mapMaxX}, mapMaxY = ${mapMaxY}")
 			forward resourcemodel -m modelUpdate : modelUpdate(roomMap, $MapStr)   
 		}
	}
	Goto warning if "mapEmpty" else init
	
	State warning{ 
		println("========================================")
		println("WARNING: map not found")
		println("========================================")
	}
	
	//stato in cui si posiziona il robot in cella (1,0) con direzione "rightDir"
	State init {
		println("")   
		println("State init")
		delayVar PauseTimeL
		run itunibo.planner.moveUtils.rotateLeft(myself, PauseTime) //giro a sx
		delayVar PauseTimeL
		println("Setup completato")
		run itunibo.planner.plannerUtil.showMap()
		println("")
		
		forward findtable -m startStep : startStep
		delayVar PauseTimeL
	} 
	Transition t1 whenMsg startStep -> doStep

	//stato in cui il robot effettua un passo
	State doStep {
		println("")
		println("State doStep")
		run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime)
	}
	Transition t2 whenMsg stepOk -> stepDone
				  whenMsg stepFail -> tableFound
	
	//robot è riuscito a fare un passo e verifica se bisogna cambiare riga
	//o proseguire sulla stessa riga			 
	State stepDone {
		println("")
		println("State stepDone")
		run itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
		delayVar PauseTimeL
		//run itunibo.planner.plannerUtil.showMap()
		["NumSteps++"]
		println("MyRobotPos=(${itunibo.planner.plannerUtil.getPosX()}, ${itunibo.planner.plannerUtil.getPosY()}, ${itunibo.planner.moveUtils.getDirection(myself)})")
		println("stepDone: NumSteps= ${NumSteps}, Row= ${Row}")
		//se ho fatto 6 passi, sono contro il muro e devo cambiare la riga
		if "(NumSteps==mapMaxX-2)" {
			forward findtable -m endRow: endRow
		}
		else {
			forward findtable -m continueStep : continueStep
		}
	}
	Transition t3 whenMsg endRow -> rotate
				  whenMsg continueStep -> doStep 
				  whenMsg stepFail -> tableFound
	
	//La stanza è 6x8 compresi i muri, quindi in realtà è 5x7 (5 righe asse y, 7 colonne asse x)
	//stato in cui il robot effettua il cambio riga
	State rotate {
		println("")
		println("State rotate")
		["NumSteps = 0"]
		println("Rotate - CurrentRow = ${Row}")
		if "(Row!=mapMaxY-2)" { //equivale a scrivere != 4
			if "(Row%2!=0)" {
				run itunibo.planner.moveUtils.rotateLeft(myself, PauseTime) 
				run itunibo.planner.moveUtils.setPosition(myself) //QUESTO IL PROF NON LO FA... NECESSARIO?
				delayVar PauseTimeL
			
				//assumiamo che il tavolo non sia lungo i bordi, quindi non può trovare ostacoli
				run itunibo.planner.moveUtils.moveAhead(myself, StepTime, PauseTime) //passo avanti
				delayVar PauseTimeL
			
				["Row += 1"]
				run itunibo.planner.moveUtils.rotateLeft(myself, PauseTime) 
				run itunibo.planner.moveUtils.setPosition(myself) //QUESTO IL PROF NON LO FA... NECESSARIO?
				delayVar PauseTimeL
			}
			else {
				run itunibo.planner.moveUtils.rotateRight(myself, PauseTime) 
				run itunibo.planner.moveUtils.setPosition(myself) //QUESTO IL PROF NON LO FA... NECESSARIO?
				delayVar PauseTimeL
			
				//assumiamo che il tavolo non sia lungo i bordi, quindi non può trovare ostacoli
				run itunibo.planner.moveUtils.moveAhead(myself, StepTime, PauseTime) //passo avanti
				delayVar PauseTimeL
				
				["Row += 1"]
				run itunibo.planner.moveUtils.rotateRight(myself, PauseTime) 
				run itunibo.planner.moveUtils.setPosition(myself) //QUESTO IL PROF NON LO FA... NECESSARIO?
				delayVar PauseTimeL
			}
			println("After Rotation - Row = ${Row}")
			//run itunibo.planner.plannerUtil.showMap()
			println("MyRobotPos=(${itunibo.planner.plannerUtil.getPosX()}, ${itunibo.planner.plannerUtil.getPosY()}, ${itunibo.planner.moveUtils.getDirection(myself)})")
		}
		if "(Row==mapMaxY-2)" {
			println("Vai a casa")
		}	
	}	
	Goto doStep if "(Row!=mapMaxY-2)" else goHome
	
	// -------------------------------------- TROVATO IL TAVOLO -----------------------------------------
	//stato in cui il robot è andato a sbattere contro il tavolo e deve girarsi a destra
	State tableFound{
		println("")
		println("####################################")
		println("State tableFound - trovato il tavolo")
		 		
 		if"InitialDirection==\"\"" {
			["InitialDirection = itunibo.planner.moveUtils.getDirection(myself)"]
 		}
 		//printCurrentMessage
 		onMsg(stepFail : stepFail(Obs,Time)) { 
			//["Tback=payloadArg(1).toString().toInt() / 2"] //abbiamo messo 4, prima era 2.. teniamo 4 o 2?
			["Tback=payloadArg(1).toString().toInt() / 4"]
			println("TABLE FOUND $Tback / ${payloadArg(1).toString()} ")
 		}
 		run itunibo.planner.moveUtils.backToCompensate(myself, Tback, PauseTime)      		 
		run itunibo.planner.moveUtils.setObstacleOnCurrentDirection(myself) //scrivo la X sulla mappa
		
		if "StepAroundTable == 8" {
 			println("State exploreEdge - Fine")
 			["EndScanningTableFlag = true"]
 		}
 		else {
 			solve(table("${itunibo.planner.plannerUtil.getPosX()}", "${itunibo.planner.plannerUtil.getPosY()}"))
			ifSolved { }
			else {
				["var PositionX = itunibo.planner.plannerUtil.getPosX()
				var PositionY = itunibo.planner.plannerUtil.getPosY()"]			
				solve(assert(table("${PositionX}", "${PositionY}")))
				solve(lastpostableinsert(X))
				ifSolved {
					["var pos = getCurSol(\"X\").toString().replace(\"'\", \"\")	//('3','1')
					pos = pos.toString().replace(\"(\", \"\")
					pos = pos.toString().replace(\")\", \"\")
					pos = pos.toString().replace(\",\", \"\")//32
					var posX = pos.get(0)//3
					var posY = pos.get(1)//2"]
				  	println("Invio la nuova posizione trovata del tavolo: $posX $posY")
				  	["forward(\"sendInfoPos\", \"sendInfoPos(table,$posX,$posY)\", \"navi\")"] //CHIEDERE AL PROF!!!!!!
				}
			}
			if "InitialDirection==\"downDir\"" {
				run itunibo.planner.moveUtils.rotateRight(myself, PauseTime)
			}	
			if "InitialDirection==\"rightDir\"" {
				run itunibo.planner.moveUtils.rotateLeft(myself, PauseTime)
			}	
			run itunibo.planner.plannerUtil.showMap()
			println("tableFound - MyRobotPos=(${itunibo.planner.plannerUtil.getPosX()}, ${itunibo.planner.plannerUtil.getPosY()}, ${itunibo.planner.moveUtils.getDirection(myself)})")
 		}
	}
  	Goto prepareToExploreEdge if "(StepAroundTable % 2 == 0)" else exploreEdge
  	
	//robot si posiziona in un angolo del tavolo prima di continuare ad esplorare il relativo perimetro
 	State prepareToExploreEdge{ 	
 		if "EndScanningTableFlag == true" {
 			//se ha finito di scansionare non gli faccio fare nulla
 		}
 		else {
 			println("prepareToExploreEdge - passo in avanti")
			run itunibo.planner.moveUtils.moveAhead(myself, StepTime, PauseTime)
			println("prepareToExploreEdge - MyRobotPos=(${itunibo.planner.plannerUtil.getPosX()}, ${itunibo.planner.plannerUtil.getPosY()}, ${itunibo.planner.moveUtils.getDirection(myself)})")
			
			if "InitialDirection==\"downDir\"" {
				//println("prepareToExploreEdge - prepareToExploreEdge - mi giro a sinistra")
				run itunibo.planner.moveUtils.rotateLeft(myself, PauseTime)
			}	
			if "InitialDirection==\"rightDir\"" {
				//println("prepareToExploreEdge - prepareToExploreEdge - mi giro a sinistra")
				run itunibo.planner.moveUtils.rotateRight(myself, PauseTime)
			}
			println("MyRobotPos=(${itunibo.planner.plannerUtil.getPosX()}, ${itunibo.planner.plannerUtil.getPosY()}, ${itunibo.planner.moveUtils.getDirection(myself)})")
	 		//run itunibo.planner.moveUtils.showCurrentRobotState()
	 	}
	}  
 	Goto exploreEdge
 	
 	//stato in cui il robot esplora il perimetro del tavolo
 	State exploreEdge{
 		if "EndScanningTableFlag == true" {
 			forward findtable -m endScanningTable : endScanningTable
 		}
 		else{
 			["StepAroundTable++"]
			println("exploreEdge - StepAroundTable=${StepAroundTable}")
			run itunibo.planner.moveUtils.moveAhead( myself, StepTime, PauseTime)
		
			if "InitialDirection==\"downDir\"" {
	   			run itunibo.planner.moveUtils.rotateLeft(myself, PauseTime)
   			}
   			if "InitialDirection==\"rightDir\"" {
	   			run itunibo.planner.moveUtils.rotateRight(myself, PauseTime)
   			}
	 		run itunibo.planner.moveUtils.attemptTomoveAhead(myself, StepTime)
	 		//run itunibo.planner.plannerUtil.showMap() 
	 	}
	}
	Transition t4 whenMsg stepFail -> tableFound
				  whenMsg endScanningTable -> goHome
				  
	//stato in cui il robot torna a casa
	State goHome{
		println("State goHome")
		run itunibo.planner.plannerUtil.saveMap(outputmapname)
		run itunibo.planner.moveUtils.saveMap(myself, outputmapname)
		solve(retractall(move(_)))
		solve(posTable(L)) 
		ifSolved { 
			println("table near: ${getCurSol(\"L\")}")
		}
		["
		var PositionX = itunibo.planner.plannerUtil.getPosX()
		var PositionY = itunibo.planner.plannerUtil.getPosY()
		"]	
		solve(assert(robot("${PositionX}", "${PositionY}", "${itunibo.planner.moveUtils.getDirection(myself)}")))
		solve(robot(X,Y,D))
		ifSolved {
			//println("Invio a navi posizione corrente robot: ${getCurSol(\"X\")} ${getCurSol(\"Y\")} ${getCurSol(\"D\")}")
			forward navi -m robotPosition : robotPosition($getCurSol("X"), $getCurSol("Y"), $getCurSol("D"))	
			delay 1000
		} 
		println("Scanning table END")
		forward navi -m goHome : goHome(rbr)
	}
}