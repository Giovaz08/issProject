System sprint3
mqttBroker "localhost" : 1883

//messaggio scambiato con roomperimeterexplorer per iniziare a scansionare il perimetro della stanza
Dispatch scanningPerimeter : scanningPerimeter(N)
//messaggio scambiato con roomperimeterexplorer terminata la scansione del perimetro della stanza
Dispatch endPerimeter : endPerimeter(N)
//messaggio scambiato con findtable per indicare di iniziare a cercare il tavolo
Dispatch scanningTable : scanningTable(N)
Dispatch homeReached : homeReached(N)
Dispatch startPrepare : startPrepare(N)
Dispatch endPrepare : endPrepare(N)
Dispatch startClear : startClear(N)
Dispatch endClear : endClear(N)

/* --------------------------- */
// CONTESTI
/* --------------------------- */ 

Context ctxSprint3 ip [host="localhost" port=9001] +mqtt
Context ctxDummyScanningRoom ip [host="localhost" port=8068] +mqtt
Context ctxDummyNavigator ip [host="localhost" port=8038] +mqtt
Context ctxDummyPrepare ip [host="localhost" port=9002] +mqtt
Context ctxDummyClear ip [host="localhost" port=9003] +mqtt

/* --------------------------- */
// ATTORI
/* --------------------------- */

ExternalQActor roomperimeterexplorer context ctxDummyScanningRoom 
ExternalQActor findtable context ctxDummyScanningRoom
ExternalQActor navi context ctxDummyNavigator
ExternalQActor prepare context ctxDummyPrepare
ExternalQActor clear context ctxDummyClear

//attore dello sprint
QActor master3 context ctxSprint3 {
	
	//stato iniziale per eventuali configurazioni inziali
	State s0 initial{
		println("MASTER 3 AVVIATO")
		run utils.backupLastLog()
		run utils.resetFile("fileLog")
		run utils.writeLog("actorName | [backToCompensate - ] currentPosition | move | result\\n")
	}
	Goto scanningperimeter
	
	//stato nel quale si comunica al planner di iniziare la scansione del perimetro della stanza
	State scanningperimeter{
		println("")
		println("State scanningperimeter")
		println("Inizio scansione della stanza.")
		forward roomperimeterexplorer -m scanningPerimeter : scanningPerimeter	
	}
	Transition t0 whenMsg endPerimeter -> findtable
	
	//stato a seguito della fase di scansione del perimetro della stanza
	State findtable{
		println("")
		println("State findtable")
		println("Inizio ricerca del tavolo.")
		forward findtable -m scanningTable : scanningTable
	}
   	Transition t1 whenMsg homeReached -> executePrepare
        
    State executePrepare{
    	println("")
		println("State executePrepare")
		delay 500
		println("Inizio prepare.")
        forward prepare -m startPrepare : startPrepare  
	}
	Transition t2 whenMsg endPrepare -> executeClear
	
	State executeClear{
		println("")
		println("State executeClear")
		delay 500
		println("Inizio clear.")
        forward clear -m startClear : startClear
	}
	Transition t3 whenMsg endClear -> next
	
	State next{
		println("")
		println("State next")
		println("Finito sprint3.")
	}
}