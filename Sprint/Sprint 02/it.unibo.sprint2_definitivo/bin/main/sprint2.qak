System sprint2

//mosquitto broker
mqttBroker "localhost" : 1883

//messaggio scambiato con roomperimeterexplorer per iniziare a scansionare il perimetro della stanza
Dispatch scanningPerimeter : scanningPerimeter(N)
//messaggio scambiato con roomperimeterexplorer terminata la scansione del perimetro della stanza
Dispatch endPerimeter : endPerimeter(N)
//messaggio scambiato con findtable per indicare di iniziare a cercare il tavolo
Dispatch scanningTable : scanningTable(N)
//messaggio scambiato con findtable per indicare che è stato trovato il tavolo
Dispatch endScanningTable : endScanningTable(N)
//messaggi inviati al navigator
Dispatch reachAppliance : reachAppliance(NAME)

Dispatch startPrepare : startPrepare(N)
Dispatch goHome  : goHome(MIT)
Dispatch reachTable  : reachTable(N)
//messaggio ricevuto dal navigator quando ha raggiunto la posizione specificata
Dispatch goalReached  : goalReached(N)
Dispatch pantryReached  : pantryReached(N)
Dispatch tableReached  : tableReached(N)
Dispatch fridgeReached  : fridgeReached(N)
Dispatch homeReached  : homeReached(N)

/* --------------------------- */
// CONTESTI
/* --------------------------- */

Context ctxSprint2 ip [host="localhost" port=9002] +mqtt
Context ctxDummyScanningRoom ip [host="localhost" port=8068] +mqtt
Context ctxDummyNavigator ip [host="localhost" port=8038] +mqtt

/* --------------------------- */
// ATTORI
/* --------------------------- */

ExternalQActor roomperimeterexplorer context ctxDummyScanningRoom 
ExternalQActor findtable context ctxDummyScanningRoom
ExternalQActor navi context ctxDummyNavigator

//attore dello sprint
QActor master2 context ctxSprint2 {
	//stato iniziale per eventuali configurazioni inziali
	State s0 initial{
		run utils.backupLastLog()
		run utils.resetFile("fileLog")
		run utils.writeLog("actorName | [backToCompensate - ] currentPosition | move | result\\n")
	}
	Goto startscanningperimeter
	
	//stato nel quale si comunica al planner di iniziare la scansione del perimetro della stanza
	State startscanningperimeter{
		println("Inizio scansione della stanza.")
		forward roomperimeterexplorer -m scanningPerimeter : scanningPerimeter	
	}
	Transition t0 whenMsg endPerimeter -> findtable
	
	//stato a seguito della fase di scansione del perimetro della stanza
	State findtable{
		forward findtable -m scanningTable : scanningTable
	}
	Transition t1 whenMsg endScanningTable -> endscanning
	
	State endscanning{
		println("Trovata la posizione del tavolo")
		delay 1000
		forward navi -m goHome: goHome(master2)
   	}
   	Transition t2 whenMsg homeReached -> executePrepare
        
    State executePrepare{
		delay 500
        forward prepare -m startPrepare : startPrepare  
	}
}

//Attore incaricato di svolgere la PREPARE
QActor prepare context ctxSprint2 {
	["var inTable = 0"]
	State s0 initial{
		solve(consult("roomState.pl"))
	}
	Transition t0 whenMsg startPrepare -> startprepare
	
	State startprepare{
		println("INIZIO PREPARE")
		println("Obiettivo PANTRY")
		forward navi -m reachAppliance : reachAppliance(pantry)
	}
	Transition t1 whenMsg pantryReached -> inPantry
	
	State inPantry{
		println("Sono nel PANTRY")
		delay 1000
		solve(iteminpantry(X))
		ifSolved{
			solve(exposePantry(L))
			println("Lista oggetti nel pantry: ${getCurSol(\"L\").toString()}")
			solve(retract(iteminpantry(dish)))
			solve(retract(iteminpantry(glasses)))
			solve(retract(iteminpantry(forks)))
			
			solve(assert(itemonrobot(dish)))
			solve(assert(itemonrobot(forks)))
			solve(assert(itemonrobot(glasses)))
			solve(exposeObjectOnRobot(L))
			println("Lista oggetti sul robot: ${getCurSol(\"L\").toString()}")
		}
		println("Obiettivo TABLE")
		delay 5000
		forward navi -m reachTable : reachTable
	}
	Transition t2 whenMsg tableReached -> intable
	
	State intable{
		println("Sono nel TABLE")
		delay 1000
		solve(exposeObjectOnRobot(L))//controllo se sul robot ho degli oggetti da inserire sul tavolo
		ifSolved{
			["var objOnRobot = getCurSol(\"L\").toString()
			objOnRobot = objOnRobot.replace(\"[\", \"\").replace(\"]\", \"\")"]
			println("Oggetti presenti sul robot: ${objOnRobot}")
			["for(obj in objOnRobot.split(\",\")){"]
				println("inserisco sul tavolo: ${obj}")
				solve(assert(itemontable("${obj}")))
				solve(retract(itemonrobot("${obj}")))			
			["}"]
		}
		
		solve(exposeFoodOnRobot(L))//controllo se sul robot ho dei cibi da inserire sul tavolo
		ifSolved{
			["var foodOnRobot = getCurSol(\"L\").toString()
			foodOnRobot = foodOnRobot.replace(\"[\", \"\").replace(\"]\", \"\").replace(\"/\", \"\").replace(\")\", \"\").replace(\"'\", \"\")"]
			println("Cibo presente sul ROBOT: ${foodOnRobot}") 
			["for(food in foodOnRobot.split(\"((\")){
				if(food != \"\"){
					var f = food.split(\",\")
					var nome = f.get(0).toString()
					var codice = f.get(1).toString()
					var quantita = Integer.parseInt(f.get(2).toString())"]
					println("inserisco sul tavolo: ${nome} ${codice} ${quantita}")
					solve(assert(itemontable("${nome}", "${codice}", "${quantita}")))
					solve(retract(itemonrobot("${nome}", "${codice}", Z)))
				}
			["}"]
		["}"]
		
		["if(inTable == 0){"]//prima volta che arrivo al tavolo durante la PREPARE
			delay 5000
			forward navi -m reachAppliance : reachAppliance(fridge)
			println("Obiettivo FRIDGE")
			["inTable = inTable + 1
		}else{"]//seconda volta che arrivo al tavolo durante la PREPARE
			println("Obiettivo RH")
			forward navi -m goHome : goHome(prepare)
		["}"]
	}
	Transition t3 whenMsg fridgeReached -> inFridge
				 whenMsg homeReached -> endPrepare
	
	State inFridge{
		println("Sono nel FRIDGE")
		solve(exposeFridge(L))
		println("Oggetti inizialmente nel frigo: ${getCurSol(\"L\").toString()}")
		
		delay 5000
		
		//rimuovo dal frigo gli oggetti da mettere sulla tavola
		solve(retract(iteminfridge(meet, c001, 5)))
		solve(retract(iteminfridge(cola, c002, 5)))
		solve(retract(iteminfridge(pizza, c004, 10)))
		
		//Quindi inserisco gli oggetti sul robot
		solve(assert(itemonrobot(meet, c001, 5)))
		solve(assert(itemonrobot(cola, c002, 5)))
		solve(assert(itemonrobot(pizza, c004, 10)))
		
		solve(exposeFridge(L))
		println("Oggetti rimasti nel frigo: ${getCurSol(\"L\").toString()}")
		solve(exposeFoodOnRobot(L))
		println("Cibo sul robot: ${getCurSol(\"L\").toString()}")			
		println("Obiettivo TABLE")
		forward navi -m reachTable : reachTable
	}
	Transition t4 whenMsg tableReached -> intable
	
	State endPrepare{
		//stampa totale per vedere lo stato finale della stanza dopo la prepare
		println("PREPARE terminata")
		println("")
		println("STATO FINALE DELLA STANZA")
		solve(expose(OT, FT, F, P, D, OR, FR))
		ifSolved{
			println("cibo sul tavolo: ${getCurSol(\"FT\").toString().replace(\"[\", \"\").replace(\"]\", \"\").replace(\"/\", \"\").replace(\")\", \"\").replace(\"'\", \"\").replace(\"(\", \" \")}")
			println("oggetti sul tavolo: ${getCurSol(\"OT\").toString().replace(\"[\", \"\").replace(\"]\", \"\").replace(\"/\", \"\").replace(\")\", \"\").replace(\"'\", \"\").replace(\"(\", \" \")}")
			println("cibo nel frigo: ${getCurSol(\"F\").toString().replace(\"[\", \"\").replace(\"]\", \"\").replace(\"/\", \"\").replace(\")\", \"\").replace(\"'\", \"\").replace(\"(\", \" \")}")
			println("oggetti rimasti nel pantry: ${getCurSol(\"P\").toString().replace(\"[\", \"\").replace(\"]\", \"\").replace(\"/\", \"\").replace(\")\", \"\").replace(\"'\", \"\").replace(\"(\", \" \")}")
			println("cibo rimasto sul robot: ${getCurSol(\"FR\").toString().replace(\"[\", \"\").replace(\"]\", \"\").replace(\"/\", \"\").replace(\")\", \"\").replace(\"'\", \"\").replace(\"(\", \" \")}")
			println("oggetti rimasti sul robot: ${getCurSol(\"OR\").toString().replace(\"[\", \"\").replace(\"]\", \"\").replace(\"/\", \"\").replace(\")\", \"\").replace(\"'\", \"\").replace(\"(\", \" \")}")	
			println("oggetti rimasti nel dishwasher: ${getCurSol(\"D\").toString().replace(\"[\", \"\").replace(\"]\", \"\").replace(\"/\", \"\").replace(\")\", \"\").replace(\"'\", \"\").replace(\"(\", \" \")}")
		}
	}
}
