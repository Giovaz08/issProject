/* Generated by AN DISI Unibo */ 
package it.unibo.rbr

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Rbr ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			var FoodCode = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("RBR AVVIATO")
						itunibo.coap.fridge.createClient( "localhost", 5684, "serverfridge"  )
						utils.backupLastLog(  )
						utils.resetFile( "fileLog"  )
						utils.resetFile( "fileLogKb"  )
						utils.writeLog( "actorName | [backToCompensate - ] currentPosition | move | result\n"  )
						utils.writeLogKb( "CONSULT"  )
					}
					 transition( edgeName="goto",targetState="waitcmd", cond=doswitch() )
				}	 
				state("waitcmd") { //this:State
					action { //it:State
						println("")
						println("State waitcmd")
						println("in attesa di un comando")
					}
					 transition(edgeName="t00",targetState="delegateSetup",cond=whenDispatch("staticStartTheSystem"))
					transition(edgeName="t01",targetState="scanningperimeter",cond=whenDispatch("dynamicStartTheSystem"))
					transition(edgeName="t02",targetState="updateMaitre",cond=whenDispatch("homeReached"))
					transition(edgeName="t03",targetState="executePrepare",cond=whenDispatch("prepare"))
					transition(edgeName="t04",targetState="updateMaitre",cond=whenDispatch("endPrepare"))
					transition(edgeName="t05",targetState="addFood",cond=whenDispatch("addFood"))
					transition(edgeName="t06",targetState="updateMaitre",cond=whenDispatch("foodAdded"))
					transition(edgeName="t07",targetState="updateMaitre",cond=whenDispatch("warning"))
					transition(edgeName="t08",targetState="executeClear",cond=whenDispatch("clear"))
					transition(edgeName="t09",targetState="updateMaitre",cond=whenDispatch("endClear"))
				}	 
				state("delegateSetup") { //this:State
					action { //it:State
						println("")
						println("State delegateSetup")
						forward("staticStartTheSystem", "staticStartTheSystem" ,"navi" ) 
						forward("log", "log" ,"kb" ) 
						forward("log", "log" ,"fridge" ) 
					}
					 transition( edgeName="goto",targetState="waitcmd", cond=doswitch() )
				}	 
				state("scanningperimeter") { //this:State
					action { //it:State
						println("")
						println("State scanningperimeter")
						println("Inizio scansione della stanza.")
						forward("scanningPerimeter", "scanningPerimeter" ,"roomperimeterexplorer" ) 
						forward("log", "log" ,"kb" ) 
						forward("log", "log" ,"fridge" ) 
						delay(1000) 
						itunibo.frontend.frontendSupport.updateCurrentTaskToFrontend(myself ,"task(Scanning the perimeter)" )
					}
					 transition(edgeName="t110",targetState="findtable",cond=whenDispatch("endPerimeter"))
				}	 
				state("findtable") { //this:State
					action { //it:State
						println("")
						println("Fine scansione della stanza.")
						println("State findtable")
						println("Inizio ricerca del tavolo.")
						itunibo.frontend.frontendSupport.updateCurrentTaskToFrontend(myself ,"task(Finding the table)" )
						forward("scanningTable", "scanningTable" ,"findtable" ) 
					}
					 transition( edgeName="goto",targetState="waitcmd", cond=doswitch() )
				}	 
				state("executePrepare") { //this:State
					action { //it:State
						println("")
						println("State executePrepare")
						delay(500) 
						println("Inizio prepare.")
						itunibo.frontend.frontendSupport.updateCurrentTaskToFrontend(myself ,"task(Executing the command PREPARE)" )
						forward("prepare", "prepare" ,"prepare" ) 
						utils.writeLogKb( "prepare"  )
					}
					 transition( edgeName="goto",targetState="waitcmd", cond=doswitch() )
				}	 
				state("addFood") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("")
						println("State addFood")
						if( checkMsgContent( Term.createTerm("addFood(FOODCODE)"), Term.createTerm("addFood(CODE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											FoodCode = payloadArg(0).toString()
								println("addFood di ${FoodCode}")
								itunibo.frontend.frontendSupport.updateCurrentTaskToFrontend(myself ,"task(Executing the command ADDFOOD)" )
								forward("addFood", "addFood($FoodCode)" ,"addfood" ) 
								utils.writeLogKb( "addfood"  )
						}
					}
					 transition( edgeName="goto",targetState="waitcmd", cond=doswitch() )
				}	 
				state("executeClear") { //this:State
					action { //it:State
						println("")
						println("State executeClear")
						forward("stopEating", "stopEating" ,"greedy" ) 
						itunibo.frontend.frontendSupport.updateCurrentTaskToFrontend(myself ,"task(Executing the command CLEAR)" )
						forward("clear", "clear" ,"clear" ) 
						utils.writeLogKb( "clear"  )
					}
					 transition( edgeName="goto",targetState="waitcmd", cond=doswitch() )
				}	 
				state("updateMaitre") { //this:State
					action { //it:State
						println("")
						println("State updateMaitre")
						if( checkMsgContent( Term.createTerm("homeReached(MIT)"), Term.createTerm("homeReached(navi)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Fine ricerca del tavolo.")
								itunibo.frontend.frontendSupport.updateFrontend(myself ,"systemStarted" )
						}
						if( checkMsgContent( Term.createTerm("endPrepare(MIT)"), Term.createTerm("endPrepare(prepare)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Fine prepare")
								itunibo.frontend.frontendSupport.updateFrontend(myself ,"endPrepare" )
								forward("startEating", "startEating" ,"greedy" ) 
						}
						if( checkMsgContent( Term.createTerm("foodAdded(MIT)"), Term.createTerm("foodAdded(addfood)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Fine addFood")
								itunibo.frontend.frontendSupport.updateFrontend(myself ,"foodAdded" )
						}
						if( checkMsgContent( Term.createTerm("warning(FOODCODE)"), Term.createTerm("warning(FOODCODE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("addFood non riuscita")
								itunibo.frontend.frontendSupport.updateFrontend(myself ,"warning" )
						}
						if( checkMsgContent( Term.createTerm("endClear(MIT)"), Term.createTerm("endClear(clear)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Fine clear")
								itunibo.frontend.frontendSupport.updateFrontend(myself ,"endClear" )
								forward("log", "log" ,"kb" ) 
								forward("log", "log" ,"fridge" ) 
						}
					}
					 transition( edgeName="goto",targetState="waitcmd", cond=doswitch() )
				}	 
			}
		}
}
