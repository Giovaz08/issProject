System party 
mqttBroker "localhost" : 1883 

/* --------------------------- */
// DISPATCH
/* --------------------------- */
 
//FOODCODE = cxxx cioè una c seguita da tre numeri 
//DR = domestic resource
//FCL = food code list   

//da frontend
Dispatch prepare : prepare(N) //da rbr, REQUISITO: command sent by the smart-phone of Maitre: prepare
Dispatch addFood : addFood(FOODCODE) //da rbr, REQUISITO: command sent by the smart-phone of Maitre: add food command, by specifying a food-code
Dispatch clear : clear(N) //da rbr //REQUISITO: command sent by the smart-phone of Maitre: clear

//a rbr 
Dispatch endPrepare : endPrepare(MIT)
Dispatch endClear : endClear(MIT)

//a frontend
Dispatch foodAdded : foodAdded(MIT)
Dispatch warning : warning(FOODCODE) //REQUISITO: send a warning to Maitre when code food doesn't exist

Dispatch answerFromFridgeCoap : answerFromFridgeCoap(ANSWER) //da fridge
Dispatch moveSpecificFoodOnRobot : moveSpecificFoodOnRobot(FCL) //a fridge

//A navi
Dispatch goHome : goHome(MIT)
Dispatch reachAppliance : reachAppliance(MIT, NAME)
Dispatch reachTable : reachTable(MIT)

//Da navi
Dispatch pantryReached : pantryReached(N)
Dispatch fridgeReached : fridgeReached(N) 
Dispatch homeReached : homeReached(MIT) 
Dispatch tableReached : tableReached(N)
Dispatch dishWasherReached : dishWasherReached(N)

//A kb
Dispatch moveFoodToDomesticResource : moveFoodToDomesticResource(DR)
Dispatch moveObjToDomesticResource : moveObjToDomesticResource(DR)
Dispatch moveObjOnRobot : moveObjOnRobot(DR)
Dispatch moveFoodOnRobot : moveFoodOnRobot(DR, NAMECODE)

/* --------------------------- */
// CONTESTI
/* --------------------------- */ 

Context ctxParty ip [host="localhost" port=9007] +mqtt
Context ctxDummyForNavigator ip [host="localhost" port=9002] +mqtt
Context ctxDummyForFridge ip [host="localhost" port=9006] +mqtt
Context ctxDummyForKb ip [host="localhost" port=9003] +mqtt
Context ctxDummyForRoomButler ip [host="localhost" port=9008] +mqtt

/* --------------------------- */
// ATTORI
/* --------------------------- */

ExternalQActor fridge context ctxDummyForFridge
ExternalQActor navi context ctxDummyForNavigator
ExternalQActor kb context ctxDummyForKb
ExternalQActor rbr context ctxDummyForRoomButler

//Attore incaricato di svolgere la PREPARE
QActor prepare context ctxParty {
	["var inTable = 0"]
	
	State s0 initial{
		println("PREPARE AVVIATA")
	}
	Goto waitCmd

	State waitCmd{
		println("PREPARE: in attesa di un comando")
    }
	Transition t0 whenMsg prepare -> doPrepare
	
	State doPrepare{
		println("")
		println("PREPARE: State doPrepare")  
		println("PREPARE: Obiettivo PANTRY")
		forward navi -m reachAppliance : reachAppliance(prepare, pantry)
	}
	Transition t1 whenMsg pantryReached -> inPantry
	
	State inPantry{
		println("")
		println("PREPARE: State inPantry")
		delay 500
		forward kb -m moveObjOnRobot : moveObjOnRobot(pantry)
		
		println("PREPARE: Obiettivo TABLE")
		forward navi -m reachTable : reachTable(prepare)
	}
	Transition t2 whenMsg tableReached -> inTable
	
	State inTable{
		println("")
		println("PREPARE: State inTable")
		delay 1000
		["if(inTable == 0){"]
			forward kb -m moveObjToDomesticResource : moveObjToDomesticResource(table)
			delay 2000
		    
			//prima volta che arrivo al tavolo durante la PREPARE --> devo andare al fridge
			println("PREPARE: Obiettivo FRIDGE")
			forward navi -m reachAppliance : reachAppliance(prepare, fridge)
			["inTable = inTable + 1
		}else{"]
			forward kb -m moveFoodToDomesticResource : moveFoodToDomesticResource(table)
			delay 2000
			
			//seconda volta che arrivo al tavolo durante la PREPARE --> devo tornare a casa
			println("PREPARE: Obiettivo RH") 
			forward navi -m goHome : goHome(prepare) 
		["}"]
	}
	Transition t3 whenMsg fridgeReached -> inFridge
				  whenMsg homeReached -> endPrepare

	State inFridge{
		println("") 
		println("PREPARE: State inFridge")
		delay 500
		//1 wurstel, 2 cola, 1 pizza, 2 chips, 1 fanta, 3 birra, 1 pasta, 3 vino 
		["val FoodCodeList = \"c001_c000_c000_c002_c004_c003_c003_c005_c006_c002_c007_c010_c010_c010_c006_c006\""]
		println("PREPARE: FoodCodeList = ${FoodCodeList}")
		forward fridge -m moveSpecificFoodOnRobot : moveSpecificFoodOnRobot($FoodCodeList) //invio msg al frigo
		delay 1000
		println("PREPARE: Obiettivo TABLE")
		forward navi -m reachTable : reachTable(prepare)
	}
	Transition t4 whenMsg tableReached -> inTable
	 
	State endPrepare{
		println("")
		println("PREPARE: State endPrepare")
		println("") 
		forward rbr -m endPrepare : endPrepare(prepare)
		println("PREPARE terminata") 
	}
}

//Attore incaricato di svolgere la ADDFOOD
QActor addfood context ctxParty {
	[" var answer=\"\" 
	var FoodCode=\"\" "]

	State s0 initial{
		println("ADDFOOD AVVIATO")
		run itunibo.coap.fridge.createClient("localhost", 5684, "serverfridge") //CoAP access
	}
	Goto waitCmd
	
	State waitCmd {
		println("")
		println("ADDFOOD: State waitCmd")
		println("ADDFOOD: in attesa di un comando")
    }
	Transition t0 whenMsg addFood -> requestForCode //da frontend
				  whenMsg answerFromFridgeCoap -> waitCmd //da fridge

	State requestForCode {
		println("")
		println("ADDFOOD: State requestForCode")
		onMsg(addFood : addFood(FOODCODE)) {
			["FoodCode = payloadArg(0).toString()"]
			run itunibo.coap.fridge.put(FoodCode) //richiesta via coap
		}
	}
	Transition t1 whenMsg answerFromFridgeCoap -> checkAnswer //da fridge
	
	State checkAnswer {
		println("")
		println("ADDFOOD: State checkAnswer")
		onMsg(answerFromFridgeCoap : answerFromFridgeCoap(ANSWER)) {
			["answer = payloadArg(0).toString()"]
		}	
	}
	//se è yes procedo, altrimenti non faccio nulla e invio un warning
	Goto reachFridge if "(answer==\"yes\") " else handleWarning
	
	State reachFridge {
		println("")
		println("ADDFOOD: State reachFridge")
		println("ADDFOOD: Obiettivo FRIDGE")	
		forward navi -m reachAppliance : reachAppliance(addfood, fridge)
	}
	Transition t4 whenMsg fridgeReached -> inFridge
	
	State inFridge {
		println("")
		println("ADDFOOD: State inFridge")
		//FoodCode non è una lista, ma un solo elemento
		forward fridge -m moveSpecificFoodOnRobot : moveSpecificFoodOnRobot($FoodCode)
		delay 2000 
		println("ADDFOOD: Obiettivo TABLE")
		forward navi -m reachTable : reachTable(addfood) 
	}
	Transition t4 whenMsg tableReached -> inTable
	
	State inTable{
		println("")
		println("ADDFOOD: State inTable")  
		forward kb -m moveFoodToDomesticResource : moveFoodToDomesticResource(table)
		delay 2000
		println("ADDFOOD: Obiettivo RH")
		forward navi -m goHome : goHome(addfood)
	} 
	Transition t3 whenMsg homeReached -> endAddFood
	
	State endAddFood {
		println("")
		println("ADDFOOD: State endAddFood")
		println("ADDFOOD terminata")
		delay 500
		forward rbr -m foodAdded : foodAdded(addfood)
	}
	Goto waitCmd 
	
	State handleWarning {
		//invia warning al maitre
		delay 500
		forward rbr -m warning : warning($FoodCode)
	}
	Goto waitCmd
	
}   

//Attore incaricato di svolgere la CLEAR
QActor clear context ctxParty {
	["var inTable = 0"]
	
	State s0 initial{
		println("CLEAR AVVIATA")
	}
	Goto waitCmd
	
	State waitCmd{
		println("CLEAR: in attesa di un comando")
    }
	Transition t0 whenMsg clear -> reachTable

	State reachTable{
		println("")
		println("CLEAR: State doClear")
		println("CLEAR: Obiettivo table")
		forward navi -m reachTable : reachTable(clear)
	}  
	Transition t1 whenMsg tableReached -> inTable
	
	State inTable{
		println("")
		println("CLEAR: State inTable")
		delay 1000
		["if(inTable == 0){"] //prima volta che arrivo al tavolo durante la CLEAR
			forward kb -m moveObjOnRobot : moveObjOnRobot(table)
			delay 1000
			
			println("CLEAR: Obiettivo DISHWASHER")
			forward navi -m reachAppliance : reachAppliance(clear, dishWasher)
			["inTable = inTable + 1
		}else{"] //seconda volta che arrivo al tavolo durante la CLEAR
			forward kb -m moveFoodOnRobot : moveFoodOnRobot(table, all_all) //all_all è una stringa fittizia
			delay 1000
			  
			println("CLEAR: Obiettivo FRIDGE")
			forward navi -m reachAppliance : reachAppliance(clear, fridge)
		["}"]
	} 
	Transition t2 whenMsg fridgeReached -> inFridge
				  whenMsg dishWasherReached -> inDishWasher
	
	State inDishWasher{
		println("")
		println("CLEAR: State inDishWasher")
		delay 1000
		forward kb -m moveObjToDomesticResource : moveObjToDomesticResource(dishwasher)
	}
	Goto reachTable
	 
	State inFridge{
		println("")
		println("CLEAR: State inFridge")
		forward kb -m moveFoodToDomesticResource : moveFoodToDomesticResource(fridge)
		delay 1000
		println("CLEAR: Obiettivo RH")
		forward navi -m goHome : goHome(clear)
	}
	Transition t4 whenMsg homeReached -> endClear
	
	State endClear{
		println("")
		println("CLEAR: State endClear")
		forward rbr -m endClear : endClear(clear)
		println("CLEAR terminata")
	}
} 