/* Generated by AN DISI Unibo */ 
package it.unibo.greedy

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Greedy ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("GREEDY AVVIATO")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
						println("in attesa di un comando")
					}
					 transition(edgeName="t00",targetState="eating",cond=whenDispatch("startEating"))
				}	 
				state("eating") { //this:State
					action { //it:State
						println("")
						println("State eating")
						val codeRandom = (0..15).random()
								var Foodcode = if (codeRandom < 10) "c00"+codeRandom else "c0"+codeRandom
						println("Foodcode generato: ${Foodcode}")
						forward("ate", "ate($Foodcode)" ,"kb" ) 
						stateTimer = TimerActor("timer_eating", 
							scope, context!!, "local_tout_greedy_eating", 10000.toLong() )
					}
					 transition(edgeName="t11",targetState="eating",cond=whenTimeout("local_tout_greedy_eating"))   
					transition(edgeName="t12",targetState="endEating",cond=whenDispatch("stopEating"))
				}	 
				state("endEating") { //this:State
					action { //it:State
						println("")
						println("State endEating")
					}
				}	 
			}
		}
}
